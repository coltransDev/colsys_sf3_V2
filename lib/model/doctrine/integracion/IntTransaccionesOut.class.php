<?php

/**
 * IntTransaccionesOut
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class IntTransaccionesOut extends BaseIntTransaccionesOut
{
    const userSap="manager";
    const passSap="912e79cd13c64069d91da65d62fbb78c";
    

    public static function procesarTransacciones($idtipo,$indice) {
        $idtransaccion = null;
        $q = Doctrine::getTable("IntTransaccionesOut")
                            ->createQuery("tr")
                            ->select("*")
                            ->innerJoin("tr.IntTipos s");

        if( $idtipo!=""  &&  $indice!="" )
        {
            $q->addWhere("tr.ca_idtipo = ? and ca_indice1=?", array($idtipo,$indice));
        }
        else
            $q->addWhere("tr.ca_estado=? AND tr.ca_datos IS NULL AND ca_idtipo NOT IN (7,8,13,20,10) ", "A");
        
        $transacciones =$q->execute();

        foreach($transacciones as $tr)
        {
            try
            {
                $datos=null;
                eval("\$datos=\$tr->json".$tr->getIntTipos()->getCaNombre()."();");
                $idtransaccion=$tr->getCaIdtransaccion();

                if($datos!=null)
                {
                    $tr->setCaEstado("G");
                    $tr->setCaDatos(json_encode($datos));
                    $tr->save();
                }
                else
                {
                    $tr->setCaEstado("N");
                    $tr->save();
                }
            }catch(Exception $e)
            {
                echo "<br>idtransaccion:".$idtransaccion."..<br>idtipo:".$idtipo."..<br>indice:".$indice,"<br>";
                echo "<pre>";print_r($datos);echo "</pre>";
                echo $e->getMessage();

                exit;
            }
        }
        return $idtransaccion;
    }
    
    public static function procesarTransaccionesxId($idtransacciones) {
        $idtransaccion = null;
        $q = Doctrine::getTable("IntTransaccionesOut")
                            ->createQuery("tr")
                            ->select("*")
                            ->innerJoin("tr.IntTipos s");

        if( $idtransacciones=="" )
        {
            return false;
        }
        
        $q->whereIn("tr.ca_idtransaccion", json_decode($idtransacciones));
        
        $transacciones =$q->execute();

        foreach($transacciones as $tr)
        {
            $datos=null;
            eval("\$datos=\$tr->json".$tr->getIntTipos()->getCaNombre()."();");
            $idtransaccion=$tr->getCaIdtransaccion();
            
            if($datos!=null)
            {
                $tr->setCaEstado("G");
                $tr->setCaDatos(json_encode($datos));
                $tr->save();
            }
            else
            {
                $tr->setCaEstado("N");
                $tr->save();
            }
        }
        return $idtransaccion;
    }
    
     /*OK REVISADO JUL/31/2017*/
    public function jsonFacturasV(){
        
        
        $reg = Doctrine::getTable("InoComprobante")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
        
        if(!$reg)
            return null;
        
        
        $datosjson=json_decode(utf8_encode($reg->getCaDatos()));
        
        $tipoComprobante = Doctrine::getTable("InoTipoComprobante")->find($reg->getCaIdtipo());
        $ccostos = Doctrine::getTable("InoCentroCosto")->find($reg->getCaIdccosto());
        
        $datos["User"]= self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $tipoComprobante->getSucursal()->getEmpresa()->getCaPathsap(); 
        $datos["System"]="2";
        
        $datos["TipoDoc"]="V";
        $datos["CodigoDoc"] = utf8_encode($tipoComprobante->getCaTipo());
        $datos["Series"] = $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap();
        $datos["NumeroInterno"] = $reg->getCaIdcomprobante();
        
        $cardcode=$reg->getIds()->getCaIdalterno();
        if(($reg->getIds()->getCaDv()>-1))
            $cardcode.="-".$reg->getIds()->getCaDv();
        
        $datos["CardCode"] = $cardcode;
        
        $datos["DocDate"] = date("Y/m/d");
        if($reg->getCaPlazo()<1 || $reg->getCaPlazo()=== null)
            $plazo=0;
        else
            $plazo=$reg->getCaPlazo();
        
        $datos["DocDueDate"] = date('Y/m/d', strtotime($reg->getCaFchcomprobante(). ' + '.($plazo).' days'));
        $datos["TaxDate"] = date("Y/m/d");
        $datos["NumAtCard"] = "";
        $datos["PrjCode"] = ($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getInoMaster()->getCaReferencia():$datosjson->ca_referencia;
        $datos["Comments"] = utf8_encode($reg->getCaObservaciones());
        $datos["SlpCode"] = ($reg->getIds()->getIdsCliente()->getUsuario()->getCaDocidentidad()!="")?$reg->getIds()->getIdsCliente()->getUsuario()->getCaDocidentidad():"-1";
        $datos["DocCur"] = $reg->getCaIdmoneda();
        $datos["DocRate"] = $reg->getCaTcambio();
        $datos["DocTransporte"] = ($reg->getCaIdhouse()>0)? substr($reg->getInoHouse()->getCaDoctransporte(),0,19):(substr($datosjson->ca_doctransporte,0,19)?substr($datosjson->ca_doctransporte,0,19):"");
        $datos["PedCliente"] = utf8_encode(substr($reg->getInoHouse()->getReporte()->getCaOrdenClie(),0,10));
        $datos["BienesTransp"] = utf8_encode(substr($reg->getProperty("bienestrans"),0,49)); 
        $datos["Trayecto"] = utf8_encode($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()." - ".$reg->getInoHouse()->getInoMaster()->getDestino()->getCaCiudad());
        $datos["TextoFactura"] = $datosjson->txttrm ? $datosjson->txttrm: "";
        $datos["Anexos"] = utf8_encode(substr($reg->getProperty("anexos"),0,100));
        $datos["Detalle"] = utf8_encode(substr($reg->getProperty("detalle"),0,99));
        $datos["Peso"] = ($reg->getCaIdhouse()>0)?($reg->getInoHouse()->getCaPeso()!=""?$reg->getInoHouse()->getCaPeso() :"0" ):(($datosjson->ca_peso!="")?$datosjson->ca_peso:0);
        $datos["Piezas"] = ($reg->getCaIdhouse()>0)?($reg->getInoHouse()->getCaNumpiezas()!=""?$reg->getInoHouse()->getCaNumpiezas() :"0" ):(($datosjson->ca_piezas!="")?$datosjson->ca_piezas:0);
        $datos["Volumen"] = ($reg->getCaIdhouse()>0)?($reg->getInoHouse()->getCaVolumen()!=""?$reg->getInoHouse()->getCaVolumen() :"0" ):(($datosjson->ca_volumen!="")?$datosjson->ca_volumen:0);
        $datos["Nave"] = ($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getInoMaster()->getCaMotonave():"";
        $datos["Sucursal"] = $tipoComprobante->getSucursal()->getCaIdsap();
        
        if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Cartagena" || $reg->getInoHouse()->getInoMaster()->getDestino()->getCaCiudad()=="Cartagena")
            $datos["Destino"] = "8P";
        else if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Buenaventura" || $reg->getInoHouse()->getInoMaster()->getDestino()->getCaCiudad()=="Buenaventura")
            $datos["Destino"] = "6P";
        else
            $datos["Destino"] = "";
        
        $s=$reg->getIdsSucursal();
        $datos["Address"] = utf8_encode($s->getCiudad()->getCaCiudad()). " ".$s->getCaIdsucursal();
        
        foreach($datosjson->idanticipo as $a)
        {
            if($a>0)
            {
                $anticipo = Doctrine::getTable("InoComprobante")->find($a);
                if ($anticipo) {
                    $datos["Anticipos"][]=array("DocEntry"=>$anticipo->getCaDocentry());
                }
            }
        }
        
        $lineas=$reg->getInoDetalle();
        
        $ccosto_sap = json_decode($ccostos->getCaCcostosap());
        $lin=array();        
        
        foreach($lineas as $linea){
            $lin[]=array(
                "ItemCode"=> utf8_encode($linea->getCaIdconcepto()),
                "Quantity" => 1,
                "UnitPrice" => $linea->getCaCr(),
                "OcrCode" => $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap(),//$reg->getInoTipoComprobante()->getCaIdsucursal(), //Código de la sucursal
                "OcrCode2" => $ccosto_sap->idarea, // Código del área
                "OcrCode3" => str_pad($reg->getUsuCreado()->getDepartamento()->getCaIdsap(),2,"0",STR_PAD_LEFT), // Código del departamento
                "OcrCode4" => $ccosto_sap->idlinea, // Código de la línea
                "OcrCode5" => "",
                "PrjCode" => ($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getInoMaster()->getCaReferencia():$datosjson->ca_referencia                
            );
        }
        
        $datos["DocumentLines"]=$lin;
        return  $datos;
        
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonFacturasC(){
        
        $reg = Doctrine::getTable("InoComprobante")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
        
        if(!$reg)
            return null;
        
       
        $tipoComprobante = Doctrine::getTable("InoTipoComprobante")->find($reg->getCaIdtipo());
        $ccostos = Doctrine::getTable("InoCentroCosto")->find($reg->getCaIdccosto()); 
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $tipoComprobante->getSucursal()->getEmpresa()->getCaPathsap();
        $datos["System"]="2";
        
        $datos["TipoDoc"]="C";
        $datos["CodigoDoc"] = "PU";
        $datos["Series"] = $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap();
        $datos["NumeroInterno"] = $reg->getCaIdcomprobante();        
        $cardcode=$reg->getIds()->getCaIdalterno();
        if(($reg->getIds()->getCaDv()>-1))
            $cardcode.="-".$reg->getIds()->getCaDv();
         
        $datos["CardCode"] = $cardcode;
        
        $datos["DocDate"] = date("Y/m/d",strtotime($reg->getCaFchcomprobante()));
        $datos["TaxDate"] = date("Y/m/d",strtotime($reg->getCaFchcomprobante()));
        if($reg->getCaPlazo()<1)
            $plazo=0;
        else
            $plazo=$reg->getCaPlazo();
        $datos["DocDueDate"] = date('Y/m/d', strtotime($reg->getCaFchcomprobante(). ' + '.($plazo).' days')); // Pendiente asociar el plazo con el asignado al proveedor
        
        $datos["NumAtCard"] = $reg->getCaConsecutivo();
        $datos["SlpCode"] = "-1"; // Código empleado de ventas
        $datos["DocCur"] = $reg->getCaIdmoneda();
        $datos["DocRate"] = $reg->getCaTcambio();
        $datos["Sucursal"] = $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap();
        
        if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Cartagena")
            $datos["Destino"] = "8P";
        else if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Buenaventura")
            $datos["Destino"] = "6P";
        else
            $datos["Destino"] = "";

        $datos["Comments"]="";
        
        $lin=array();
        $lineas=$reg->getInoDetalle();
        
        $ccosto_sap = json_decode($ccostos->getCaCcostosap());
         foreach($lineas as $linea){
            $lin[]=array(
                "ItemCode"=> utf8_encode($linea->getCaIdconcepto()),
                "Quantity" => $linea->getCaCr()<0?-1:1,
                "UnitPrice" => $linea->getCaCr()<0?$linea->getCaCr()*-1:$linea->getCaCr(),
                "OcrCode" => $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap(),
                "OcrCode2" => $ccosto_sap->idarea, // Código del área
                "OcrCode3" => str_pad($reg->getUsuCreado()->getDepartamento()->getCaIdsap(),2,"0",STR_PAD_LEFT), // Código del departamento
                "OcrCode4" => $ccosto_sap->idlinea, // Código de la línea
                "OcrCode5" => "",
                "PrjCode" => $linea->getInoMaster()->getCaReferencia()                
            );
        }
        $datos["DocumentLines"]=$lin;       
        return  $datos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonReferenciasCreacion() {
        
        $master = Doctrine::getTable("InoMaster")
                          ->createQuery("m")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                          ->fetchOne();
        if(!$master)
            return null;
        
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datosJson = json_decode($master->getCaDatos());
        if($datosJson->idempresa>0)
            $company=$datosJson->idempresa;
        else
            $company=2;
        
        $empresa = Doctrine::getTable("Empresa")->find($company);
        $datos["Company"]= $empresa->getCaPathsap();
        $datos["System"]="2";
        $datos["PrjCode"]=$master->getCaReferencia();
        $datos["PrjName"]=utf8_encode($master->getCaImpoexpo()."-".$master->getCaTransporte());
        $datos["ValidFrom"]=date("Y/m/d");
        $datos["Estado"]="A";        
        
         return  $datos;
        
    }
    
    
    public function jsonReferenciasActualizacion() {
        
        $master = Doctrine::getTable("InoMaster")
                          ->createQuery("m")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                          ->fetchOne();
        
        if(!$master)
            return null;
        
        $estado= "C";
        if($master->getCaFchliquidado()=="")
            $estado= "A";
        
        if($master->getCaFchanulado()!="")
            $estado= "AN";
        
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datosJson = json_decode($master->getCaDatos());
        if($datosJson->idempresa && $datosJson->idempresa>0)
            $company=$datosJson->idempresa;
        else
            $company=2;
        
        $empresa = Doctrine::getTable("Empresa")->find($company);
        $datos["Company"]= $empresa->getCaPathsap();
        
        $datos["System"]="2";
        $datos["PrjCode"]=$master->getCaReferencia();
        $datos["PrjName"]=utf8_encode($master->getCaImpoexpo()."-".$master->getCaTransporte());
        
        $datos["ValidFrom"]="";//cambio por solicitud de Nicolas y Andrea de seidor 2017-10-30
        $datos["Estado"]=$estado;
        return  $datos;
    }

    /*OK REVISADO JUL/31/2017*/
    public function jsonClientes() {

        $q = Doctrine::getTable("Cliente")
                          ->createQuery("c")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1());
        
        $reg=$q->fetchOne();
        
        if(!$reg)
            return null;
                          
        if ($this->getCaIndice2())
            $empresa = Doctrine::getTable("Empresa")->findOneBy("ca_idsap",$this->getCaIndice2());
        else
            $empresa = Doctrine::getTable("Empresa")->findOneBy("ca_idsap", 1); /* Empresa por Defecto Coltrans */
        $credito = Doctrine::getTable("IdsCredito")
                          ->createQuery("c")
                          ->select("*")
                          ->where("ca_id = ?", $this->getCaIndice1())
                          ->addWhere("ca_tipo = ?", "C")
                          ->addWhere("ca_idempresa = ?", $empresa->getCaIdempresa())
                          ->fetchOne();
        
        $CreditLimit = ($credito)?$credito->getCaCupo():0;
        $ndias=($credito)?$credito->getCaDias():0;
                          
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $empresa->getCaPathsap();
        $datos["System"]="2";
        $datos["CardCode"]="C".$reg->getCaIdalterno();
        $datos["CardName"]=utf8_encode(substr($reg->getCaCompania(),0,99));
        $datos["CardFName"]=utf8_encode(substr($reg->getCaCompania(),0,99)); // Nombre Extranjero
        $datos["CardType"]="0";  // Tipo SN 0: Cliente 1: Proveedor 2: Lead      
        $datos["GroupCode"]="2";  // Código de grupo de socios de negocio
        $datos["CreditLimit"]=$CreditLimit;
        $datos["Fax"]="";
        
        $datos["Phone1"]=substr(htmlentities($reg->getCaTelefonos(), ENT_IGNORE | ENT_SUBSTITUTE, "UTF-8"), 0, 20);
        $datos["GroupNum"]=$ndias; //Condición de pago. Revisar tabla de condiciones de pago
        $LicTradNum = $reg->getCaIdalterno();   // Sep14-2017 Si no es Persona N debe llevar digito de verificación separado por guión
        if ($reg->getCaDigito() !== null) {
            $LicTradNum.= "-".$reg->getCaDigito();
        }
        $datos["LicTradNum"]=$LicTradNum; //Número de indentificación fiscal
        $datos["Country"]=substr($reg->getIds()->getSucursalPrincipal()->getCiudad()->getCaIdtrafico(), 0, 2);   // Sep14-2017 se implementa el pais para idenficar los extranjeros
        $datos["SlpCode"]=($reg->getUsuario()->getCaDocidentidad()!="")?$reg->getUsuario()->getCaDocidentidad():"-1";
        $datos["E_Mail"]=$reg->getCaEmail();

        $conn = Doctrine_Manager::getInstance()->connection();
        $sql = "select ca_activo from ids.tb_estados_sap where ca_id = " . $this->getCaIndice1() . " and ca_tipo = 'C' and ca_idempresa = " . $empresa->getCaIdempresa() . " order by ca_fchcreado DESC limit 1";
        $stmt = $conn->execute($sql);
        $estado = $stmt->fetchAll(PDO::FETCH_COLUMN);
        if ($estado[0]) {  // 
            $datos["frozenFor"]="1"; //Activo 0: No 1: Si
        } else {
            $datos["frozenFor"]="0"; //Activo 0: No 1: Si
        }
        
        $datos["DebPayAcct"] = ""; // Pendiente
        $datos["Estado"]="N"; //Y: SI N: NO
        $datos["Empleado"] = "N"; //Se indica si el socio de negocio es un empleado de venta
        
        $datos["Addresses"]=$this->getJsonDireContac($reg->getIds());        
        $datos["Contacts"]=$this->getJsonContactos($reg->getIds());
        $datos["BankAccounts"] = $this->getJsonBancos($reg->getIds());
        
        return  $datos;
    }
    
     /*OK REVISADO JUL/31/2017*/
    public function jsonAgentes() {
        
        $reg = Doctrine::getTable("Ids")
                          ->createQuery("i")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                          ->fetchOne();
        $empresa = Doctrine::getTable("Empresa")->findOneBy("ca_idsap", 1); /* Empresa por Defecto Coltrans */

        if(!$reg)
            return null;

        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]=$empresa->getCaPathsap();
        $datos["System"]="2";

        $datos["CardCode"]="P".$reg->getCaIdalterno();        
        $datos["CardName"]=utf8_encode(substr($reg->getCaNombre(),0,99));
        $datos["CardFName"]=utf8_encode(substr($reg->getCaNombre(),0,99));
        $datos["CardType"]="1";  // Tipo SN 0: Cliente 1: Proveedor 2: Lead      
        $datos["GroupCode"]="145";
        $datos["CreditLimit"]="0";
        $datos["Fax"]="";
        $datos["Phone1"]=$reg->getSucursalPrincipal()->getCaTelefonos()?substr($reg->getSucursalPrincipal()->getCaTelefonos(), 0, 20):"";
        $datos["GroupNum"]="0"; //Condición de pago. Revisar tabla de condiciones de pago
        $LicTradNum = $reg->getCaIdalterno();   // Sep14-2017 Si no es Persona N debe llevar digito de verificación separado por guión
        if ($reg->getCaDv() !== null) {
            $LicTradNum.= "-".$reg->getCaDv();
        }
        $datos["LicTradNum"]=$LicTradNum;
        $datos["Country"]=substr($reg->getSucursalPrincipal()->getCiudad()->getCaIdtrafico(), 0, 2);   // Sep14-2017 se implementa el pais para idenficar los extranjeros
        $datos["SlpCode"]="-1"; //Número de empleado de ventas
        $datos["E_Mail"]="";

        $conn = Doctrine_Manager::getInstance()->connection();
        $sql = "select ca_activo from ids.tb_estados_sap where ca_id = " . $this->getCaIndice1() . " and ca_tipo = 'A' and ca_idempresa = " . $empresa->getCaIdempresa() . " order by ca_fchcreado DESC limit 1";
        $stmt = $conn->execute($sql);
        $estado = $stmt->fetchAll(PDO::FETCH_COLUMN);
        if ($estado[0]) {  // 
            $datos["frozenFor"]="1"; //Activo 0: No 1: Si
        } else {
            $datos["frozenFor"]="0"; //Activo 0: No 1: Si
        }
        
        $datos["DebPayAcct"] = ""; // Pendiente
        $datos["Estado"]="N";
        $datos["Empleado"] = "N"; //Se indica si el socio de negocio es un empleado de venta

        $datos["Addresses"]=$this->getJsonDireContac($reg);
        $datos["Contacts"]=$this->getJsonContactos($reg);
        $datos["BankAccounts"] = $this->getJsonBancos($reg);
        
        return  $datos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonProveedores() {
        
         $reg = Doctrine::getTable("Ids")
                          ->createQuery("i")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                          ->fetchOne();
         
        if ($this->getCaIndice2())
            $empresa = Doctrine::getTable("Empresa")->findOneBy("ca_idsap",$this->getCaIndice2());
        else
            $empresa = Doctrine::getTable("Empresa")->findOneBy("ca_idsap", 1); /* Empresa por Defecto Coltrans */

        if(!$reg)
            return null;
        
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $empresa->getCaPathsap();
        $datos["System"]="2";

        $datos["CardCode"]="P".$reg->getCaIdalterno();
        $datos["CardName"]=utf8_encode(substr($reg->getCaNombre(),0,99));
        $datos["CardFName"]=utf8_encode(substr($reg->getCaNombre(),0,99));
        $datos["CardType"]="1";  // Tipo SN 0: Cliente 1: Proveedor 2: Lead  
        $datos["GroupCode"]=($reg->getIdsProveedor()->getCaIdclasificacion()!="")?$reg->getIdsProveedor()->getCaIdclasificacion():"1";  // Código de grupo de socios de negocio
        
        $datos["CreditLimit"]="0";
        $datos["Fax"]="";                
        
        
        $sucPrincipal=$reg->getSucursalPrincipal();       
        $phone1="";
        $country="";
        if($sucPrincipal)
        {
            $phone1=$reg->getSucursalPrincipal()->getCaTelefonos()?substr($reg->getSucursalPrincipal()->getCaTelefonos(), 0, 20):"";
            $country=substr($reg->getSucursalPrincipal()->getCiudad()->getCaIdtrafico(), 0, 2);
        }
        $datos["Phone1"]=$phone1;
        $datos["GroupNum"]="0"; //Condición de pago. Revisar tabla de condiciones de pago
        $LicTradNum = $reg->getCaIdalterno();   // Sep14-2017 Si no es Persona N debe llevar digito de verificación separado por guión
        if ($reg->getCaDv() !== null) {
            $LicTradNum.= "-".$reg->getCaDv();
        }
        $datos["LicTradNum"]=$LicTradNum;
        $datos["Country"]=$country;   // Sep14-2017 se implementa el pais para idenficar los extranjeros
        $datos["SlpCode"]="-1"; //Número de empleado de ventas
        $datos["E_Mail"]="";

        $conn = Doctrine_Manager::getInstance()->connection();
        $sql = "select ca_activo from ids.tb_estados_sap where ca_id = " . $this->getCaIndice1() . " and ca_tipo = 'P' and ca_idempresa = " . $empresa->getCaIdempresa() . " order by ca_fchcreado DESC limit 1";
        $stmt = $conn->execute($sql);
        $estado = $stmt->fetchAll(PDO::FETCH_COLUMN);
        if ($estado[0]) {  // 
            $datos["frozenFor"]="1"; //Activo 0: No 1: Si
        } else {
            $datos["frozenFor"]="0"; //Activo 0: No 1: Si
        }
        
        $datos["DebPayAcct"] = "";
        $datos["Empleado"] = "N"; //Se indica si el socio de negocio es un empleado de venta

        $datos["Addresses"]=$this->getJsonDireContac($reg);
        $datos["Contacts"]=$this->getJsonContactos($reg);
        $datos["BankAccounts"] = $this->getJsonBancos($reg);        
        return  $datos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonEmpleados() {
        
        $q = Doctrine::getTable("Usuario")
                ->createQuery("u")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1());
        
        $reg=$q->fetchOne();

        if ($this->getCaIndice2())
            $empresa = Doctrine::getTable("Empresa")->findOneBy("ca_idsap",$this->getCaIndice2());
        else
            $empresa = Doctrine::getTable("Empresa")->findOneBy("ca_idsap", 1); /* Empresa por Defecto Coltrans */

        if(!$reg)
            return null;

        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $reg->getCargo()->getCaVentas()===true?$empresa->getCaPathsap():$reg->getSucursal()->getEmpresa()->getCaPathsap();
        $datos["System"]="2";
        $datos["CardCode"]="E".$reg->getCaDocidentidad();
        $datos["CardName"]=utf8_encode(substr($reg->getCaApellidos()." ". $reg->getCaNombres(),0,99));
        $datos["CardFName"]=utf8_encode(substr($reg->getCaApellidos()." ". $reg->getCaNombres(),0,99));
        $datos["CardType"]="1";  // Tipo SN 0: Cliente 1: Proveedor 2: Lead      
        $datos["GroupCode"]="144";  // Código de grupo de socios de negocio
        $datos["CreditLimit"]="0";
        $datos["Fax"]="";
        $datos["Phone1"]=utf8_encode(substr($reg->getSucursal()->getCaTelefono(),0,20) );
        $datos["GroupNum"]="0"; 
        $datos["LicTradNum"]=utf8_encode($reg->getCaDocidentidad());
        $datos["SlpCode"]="-1"; //Número de empleado de ventas
        $datos["E_Mail"]=utf8_encode($reg->getCaEmail());
        $datos["frozenFor"]="1"; //Activo 0: No 1: Si        
        
        $datos["DebPayAcct"] = ""; // Pendiente
        $datos["Estado"]="N"; //Y: SI N: NO
        $datos["Empleado"] = $reg->getCargo()->getCaVentas()===true?"Y":"N"; //Se indica si el socio de negocio es un empleado de venta

        return  $datos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function getJsonDireContac($ids)
    {
        $dir=$contactos=array();
        $c=0;
        $suc=$ids->getIdsSucursal();
        foreach($suc as  $s)
        {
            if($s->getCaUsueliminado()!="")
            {
                continue;
            }
            $country= explode("-", $s->getCiudad()->getTrafico()->getCaIdtrafico());  //explode("-",utf8_encode($s->getCiudad()->getTrafico()->getCaIdtrafico()));
            $dir[$c]["Address"] = utf8_encode($s->getCiudad()->getCaCiudad()). " ".$s->getCaIdsucursal();
            $dir[$c]["AddrType"]="";//TODO
            $dir[$c]["Street"]= utf8_encode(substr( trim($s->getCaDireccion()),0,50) );
            $dir[$c]["City"]=utf8_encode($s->getCiudad()->getCaCiudad());
            $dir[$c]["County"]=($s->getCiudad()->getCaIdtrafico()=='CO-057')?utf8_encode($s->getCiudad()->getCaDivipola()):'99999';
            $dir[$c]["Country"]=$country[0];//utf8_encode($s->getCiudad()->getTrafico()->getCaIdtrafico());
            $dir[$c++]["DireccionMM"]=($s->getCaPrincipal()==true)?"Y":"N";
        }
        return $dir;
    }

    /*OK REVISADO JUL/31/2017*/
    public function getJsonContactos($ids)
    {
        $contactos=array();
        $suc=$ids->getIdsSucursal();
        $l=0;
        foreach($suc as  $s)
        {
            if($s->count()>0)
            {
                if($s->getCaUsueliminado()!="")
                {
                    continue;
                }
                $con=$s->getIdsContacto();
                foreach($con as  $j=>$c)
                {
                    $pos=strpos(trim($c->getCaNombres()), " ");
                    if($pos>0)
                    {
                        $pnombre= substr($c->getCaNombres(), 0,$pos-1);
                        $snombre= substr($c->getCaNombres(), $pos, (strlen($c->getCaNombres())-$pos));
                    } else { 
                        $pnombre= trim($c->getCaNombres());
                        $snombre= "";
                    }                        
                    //$nombre=
                    $contactos[$l]["Name"]="{$c->getCaIdcontacto()}";
                    $contactos[$l]["Position"]=utf8_encode($c->getCaCargo());
                    $contactos[$l]["FirstName"]=utf8_encode($pnombre);
                    $contactos[$l]["MiddleName"]= utf8_encode($snombre);
                    $contactos[$l]["LastName"]=utf8_encode($c->getCaPapellido(). " ".$c->getCaSapellido());
                    if ($c->getCaDireccion()) {
                        $contactos[$l]["Address"]=utf8_encode(trim(substr($c->getCaDireccion(),0,99)));
                    } else {
                        $contactos[$l]["Address"]=utf8_encode(trim(substr($s->getCaDireccion(),0,99)));
                    }
                    $contactos[$l]["Tel1"]=utf8_encode(substr($c->getCaTelefonos(),0,20));
                    $contactos[$l]["Active"]=($c->getCaActivo())?1:0;   /* Sep 19/2017 Se implementa un nuevo campo Active */
                    $contactos[$l++]["E_Mail"]=utf8_encode($c->getCaEmail());                    
                }
            }
        }
        return $contactos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function getJsonBancos($ids)
    {
        $bnk = array();
        $bancos=$ids->getIdsBanco();        
        foreach($bancos as $k => $b)
        {
            $c = Doctrine::getTable("ColsysConfigValue")->find($b->getCaCodigoEntidad());            
            $bnk[$k]["BankCode"] = str_pad($c->getCaIdent(), 2, "0", STR_PAD_LEFT);
            $bnk[$k]["Account"] = utf8_encode($b->getCaNumeroCuenta());
            $bnk[$k]["TipoCta"] = utf8_encode($b->getCaTipoCuenta()); // A: Ahorros C: Corriente            
        }        
        return $bnk;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonConceptos() {
        
         $reg = Doctrine::getTable("InoMaestraConceptos")
                          ->createQuery("u")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                          ->fetchOne();

        if ($this->getCaIndice2())
            $empresa = Doctrine::getTable("Empresa")->findOneBy("ca_idsap",$this->getCaIndice2());
        else
            $empresa = Doctrine::getTable("Empresa")->findOneBy("ca_idsap", 1); /* Empresa por Defecto Coltrans */

        if(!$reg)
            return null;
        
        $datos["user"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $empresa->getCaPathsap();
        $datos["System"]="2";

        $datos["ItemCode"]=utf8_encode($reg->getCaIdconcepto());
        $datos["ItemName"]=utf8_encode($reg->getCaConceptoEsp());
        $datos["FrgnName"]=utf8_encode($reg->getCaConceptoEng());
        $datos["Estado"]="N";
        $datos["SellItem"]=($reg->getCaVenta()=="1" || $reg->getCaVenta()=="true" || $reg->getCaVenta()==true)?"1":"0";      //Venta
        $datos["PrchseItem"]=($reg->getCaCompra()=="1" || $reg->getCaCompra()=="true" || $reg->getCaCompra()==true)?"1":"0"; //Compra
        
         return  $datos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonReferenciasUtilidad(){
    
        $master = Doctrine::getTable("InoMaster")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
        
        if(!$master)
            return null;
        
        $ccosto = Doctrine::getTable("InoCentroCosto")->findByDql("ca_impoexpo = ? AND ca_transporte = ? AND ca_idccosto > 99", array($master->getCaImpoexpo(), $master->getCaTransporte()))->getFirst();
        $linea = json_decode($ccosto->getCaCcostosap(), 1);
        
        $datosJson = json_decode($master->getCaDatos());
        if($datosJson->idempresa && $datosJson->idempresa>0)
            $company=$datosJson->idempresa;
        else
            $company=2;
        
        $empresa = Doctrine::getTable("Empresa")->find($company);

        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $empresa->getCaPathsap();
        
        $datos["System"]="2";
        
        $datos["CodReferencia"] = $master->getCaReferencia();
        $datos["Fecha"] = date('Y/m/d');
        $datos["Comentarios"] = "";//substr(htmlentities($master->getCaObservaciones()),0,99);
        $datos["Linea"] = $linea["idlinea"];
         
        $con1 = Doctrine_Manager::getInstance()->getConnection('master');
        
        $sql="
            SELECT DISTINCT h.ca_idcliente as ca_idcliente, i.ca_idalterno as ca_id, c.ca_idsucursal as ca_idsucursal, i.ca_dv as ca_dv, h.ca_peso as ca_peso, h.ca_volumen as ca_volumen, h.ca_idhouse as ca_idhouse
            FROM ino.tb_house h
                    INNER JOIN ino.vi_consulta_comprobantes c ON c.ca_idhouse = h.ca_idhouse
                    INNER JOIN ids.tb_ids i ON i.ca_id = c.ca_id
            WHERE c.ca_estado = 5 AND c.ca_idmaster = ".$master->getCaIdmaster();
        $st = $con1->execute($sql);
        $lineas = $st->fetchAll();
        
        $distribucionUti = $this->calcularDistribucionxUtilidad2($lineas);
        
        $clientes = array();
        
        foreach($lineas as $linea){            
            $cardcode=$linea["ca_id"];
            if(($linea["ca_dv"]>-1))
                $cardcode.="-".$linea["ca_dv"];
            if(!in_array($linea["ca_id"], $clientes)){                
                $sucursal = Doctrine::getTable("Sucursal")->find($linea["ca_idsucursal"]);
                $datos["Lineas"][] = array("CardCode"=>$cardcode, "PorcUtilidad"=>$distribucionUti[$linea["ca_id"]], "Sucursal"=>$sucursal->getCaIdsap());
                $clientes[] = $linea["ca_id"];
            }
        }
        
        return  $datos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonReferenciasCostos(){
    
        $master = Doctrine::getTable("InoMaster")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
        
        if(!$master)
            return null;
        
        $datosJson = json_decode($master->getCaDatos());
        if($datosJson->idempresa && $datosJson->idempresa>0)
            $company=$datosJson->idempresa;
        else
            $company=2;
        
        $empresa = Doctrine::getTable("Empresa")->find($company);
        
        $clientes = array();
        
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $empresa->getCaPathsap(); // Se obtiene de la empresa a la que pertenece el usuario que la creó
        $datos["System"]="2";
        
        $datos["CodReferencia"] = $master->getCaReferencia();
        $datos["Fecha"] = date('Y/m/d');
        $datos["Comentarios"] = "";//substr(htmlentities($master->getCaObservaciones()),0,99);
                
        $con1 = Doctrine_Manager::getInstance()->getConnection('master');
        
        $sql = "
            SELECT ca_idalterno as ca_id, i.ca_dv as ca_dv, sum(ca_peso) as ca_peso, sum(ca_volumen) as ca_volumen
            FROM ino.vi_ingresos ing
                LEFT JOIN ids.tb_ids i ON ing.ca_idcliente = i.ca_id
                INNER JOIN ino.tb_house h ON h.ca_idhouse = ing.ca_idhouse
            WHERE ing.ca_idmaster = ".$master->getCaIdmaster().
            "GROUP BY ca_idalterno, ca_dv";
        $st = $con1->execute($sql);
        $lineas = $st->fetchAll();        
        
        $costoxCliente = $this->calcularDistribucionxCostos2($master, $lineas);
        
            foreach($lineas as $linea){
                $cardcode=$linea["ca_id"];
                if(($linea["ca_dv"]>-1))
                    $cardcode.="-".$linea["ca_dv"];
                if(!in_array($linea["ca_id"], $clientes)){            
                    $datos["Lineas"][] = array("CardCode"=>$cardcode, "PorcParticipa"=>$costoxCliente[$linea["ca_id"]]);
                    $clientes[] = $linea["ca_id"];
                }
            }
        return $datos;
    }
    
    public function calcularDistribucionxUtilidad2($lineas){
        
        $utcliente = array();
        $distribucionUti = array();
        
        if(count($lineas) > 1){ // Las referencias con un solo house omiten el prorrateo
            foreach($lineas as $linea){            
                $house = Doctrine::getTable("InoHouse")->find($linea["ca_idhouse"]);
                if($house->getCaVolumen() > 0){
                    if($house->getInoMaster()->getVlrFacturado()!=0)
                    $utHouse = $house->getUtilidadPorHouse();            
                }
                
                if(!$utHouse)
                    $utHouse = $house->getIno();
                $utcliente[$linea["ca_id"]]+=$utcliente[$linea["ca_id"]]?$utcliente[$linea["ca_id"]]+$utHouse:$utHouse;
            }

            $tot_utilidad = array_sum($utcliente);
            
            if($tot_utilidad != 0) {
            
                /*echo "Nueva Utilidad<br/>";
                echo "<pre>";print_r($utcliente);echo "</pre>";
                echo "Total Utilidad".array_sum($utcliente)."<br/>";*/

                foreach($utcliente as $key => $val){
                    $distribucionUti[$key] = round(($utcliente[$key]*100)/$tot_utilidad,0);
                }

                /*echo "Utilidad Porcentaje<br/>";
                echo "<pre>";print_r($distribucionUti);echo "</pre>";
                echo "Total Utilidad Porcentaje".array_sum($distribucionUti)."<br/>";*/

                $tot_utilidad2 = array_sum($distribucionUti);        
                $diff = $tot_utilidad2-100;

                if($diff!==0){
                    $max = max($distribucionUti);

                    foreach($distribucionUti as $key=>$val){
                        if($distribucionUti[$key]==$max)
                            $id = $key;
                    }

                    $distribucionUti[$id] = $distribucionUti[$id] - $diff;
                    $total_utilidad_ajustada = array_sum($distribucionUti);
                }
            }else{
                foreach($utcliente as $key => $val){
                    $distribucionUti[$key] = 0;
                }
            }
        }else{
            $distribucionUti[$lineas[0]["ca_id"]] = 100;
            
        }
        
        return $distribucionUti;
    }
    
    public function calcularDistribucionxCostos2($master, $lineas){
        
        $con1 = Doctrine_Manager::getInstance()->getConnection('master');
        $sql="
            SELECT DISTINCT (c.ca_idhouse) as ca_idhouse, i.ca_idalterno as ca_idcliente, ct.ca_neto as ca_neto, ct.ca_tcambio
            FROM ino.tb_costos ct
                LEFT JOIN ino.tb_house h ON h.ca_idhouse = ct.ca_idhouse
                left JOIN ino.vi_consulta_comprobantes c ON h.ca_idhouse = c.ca_idhouse AND c.ca_estado = 5
                LEFT JOIN ids.tb_ids i ON c.ca_id = i.ca_id
            WHERE ct.ca_fchanulado IS NULL AND ct.ca_idmaster = ".$master->getCaIdmaster();
        $st = $con1->execute($sql);
        $costos = $st->fetchAll();        
        
        $ct = array();        
        
        if(count($lineas)>1){
            foreach($costos as $costo){

                $idhouse = $costo["ca_idhouse"];

                if($idhouse){
                    $house = Doctrine::getTable("InoHouse")->find($idhouse);            
                    $ct[$costo["ca_idcliente"]]+=$costo["ca_neto"]*$costo["ca_tcambio"];
                }else{            
                    $ct["General"]+=$costo["ca_neto"]*$costo["ca_tcambio"];
                }            
            }

            $tot_costo = array_sum($ct);
            $clientes = array();

            foreach($lineas as $linea){            
                $peso[$linea["ca_id"]]+= $master->getCaTransporte()=="Marítimo"?$linea["ca_volumen"]:$linea["ca_peso"];
                if(!in_array($linea["ca_id"], $clientes))
                    $clientes[] = $linea["ca_id"];
            }
            $tot_peso = array_sum($peso);

            if ( $tot_peso <> 0 ) {
                foreach($lineas as $linea){            
                    $distribucion[$linea["ca_id"]] = round($peso[$linea["ca_id"]]/$tot_peso*100,2);
                }

                foreach($clientes as $cliente){            
                    $ctxCliente[$cliente]+= round($ct[$cliente]+($ct["General"]*$distribucion[$cliente]/100));
                }            

            }

            $tot_costos = array_sum($ctxCliente);

            foreach($lineas as $linea){            
                $ctxPorcxCliente[$linea["ca_id"]] = round($ctxCliente[$linea["ca_id"]]/$tot_costos*100,0);                
            }

            // Ajuste a la Utilidad para que sume 100
            $tot_utilidad2 = array_sum($ctxPorcxCliente);        
            $diff = $tot_utilidad2-100;

            if($diff!==0){
                $max = max($ctxPorcxCliente);

                foreach($ctxPorcxCliente as $key=>$val){
                    if($ctxPorcxCliente[$key]==$max)
                        $id = $key;
                }

                $ctxPorcxCliente[$id] = $ctxPorcxCliente[$id] - $diff;
                $total_utilidad_ajustada = array_sum($ctxPorcxCliente);
            }
        }else{
            foreach($lineas as $linea){
                $ctxPorcxCliente[$linea["ca_id"]] = 100;
            }  
        }
        
        return $ctxPorcxCliente;
        
    }
    
     /*OK REVISADO JUL/31/2017*/
    public function jsonNotasCredito(){
    
        $reg = Doctrine::getTable("InoComprobante")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
    
        if(!$reg)
            return null;
        
        $tipoComprobante = Doctrine::getTable("InoTipoComprobante")->find($reg->getCaIdtipo());
        $tipoDoc = $tipoComprobante->getCaPrefijoSap();
        $ccostos = Doctrine::getTable("InoCentroCosto")->find($reg->getCaIdccosto());
        $datosjson=json_decode(utf8_encode($reg->getCaDatos()));
        
        $datos["user"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $tipoComprobante->getSucursal()->getEmpresa()->getCaPathsap(); // Pendiente definir en tabla de empresas los Id de SAP
        $datos["System"]="2";
        
        $datos["TipoDoc"]=$tipoDoc;
        $datos["CodigoDoc"] = utf8_encode($tipoComprobante->getCaTipo());
        $datos["Series"] = $tipoComprobante->getCaComprobante();
        $datos["NumeroInterno"] = $reg->getCaIdcomprobante();
        
        $cardcode=$reg->getIds()->getCaIdalterno();
        if(($reg->getIds()->getCaDv()>-1))
            $cardcode.="-".$reg->getIds()->getCaDv();
        
        $datos["CardCode"] = $cardcode;         
        $datos["DocDate"] = date("Y/m/d");
        
        $datos["TaxDate"] = date("Y/m/d");
        if($reg->getCaPlazo()<1)
            $plazo=0;
        else
            $plazo=$reg->getCaPlazo();
        
        
        
        $datos["DocDueDate"] = date('Y/m/d', strtotime($reg->getCaFchcomprobante(). ' + '.($plazo).' days')); // Pendiente asociar el plazo con el asignado al proveedor
        $datos["NumAtCard"] = "";        
        $datos["Comments"] = ($reg->getCaObservaciones()!="")?$reg->getCaObservaciones():"";
        $datos["SlpCode"] = ($reg->getIds()->getIdsCliente()->getUsuario()->getCaDocidentidad()!="")?$reg->getIds()->getIdsCliente()->getUsuario()->getCaDocidentidad():"-1";
        $datos["DocCur"] = $reg->getCaIdmoneda();
        $datos["DocRate"] = $reg->getCaTcambio();
        $datos["PrjCode"] = ($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getInoMaster()->getCaReferencia():$datosjson->ca_referencia;
        
        $s=$reg->getIdsSucursal();
        $datos["Address"] = utf8_encode($s->getCiudad()->getCaCiudad()). " ".$s->getCaIdsucursal();
        
        if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Cartagena" || $reg->getInoHouse()->getInoMaster()->getDestino()->getCaCiudad()=="Cartagena")
            $datos["Destino"] = "8P";
        else if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Buenaventura" || $reg->getInoHouse()->getInoMaster()->getDestino()->getCaCiudad()=="Buenaventura")
            $datos["Destino"] = "6P";
        else
            $datos["Destino"] = "";
        
        $datosJson=json_decode($reg->getCaDatos());
        
        
        $datos["BaseEntry"]=($datosJson->baseentry>0)?$datosJson->baseentry:"";
        
        $lineas=$reg->getInoDetalle();
        
        $ccosto_sap = json_decode($ccostos->getCaCcostosap());
        $lin=array();
        
        foreach($lineas as $linea){
            $lin[]=array(
                "ItemCode"=> utf8_encode($linea->getCaIdconcepto()),
                "Quantity" => 1,
                "UnitPrice" => $linea->getCaDb(),
                "OcrCode" => $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap(),//$reg->getInoTipoComprobante()->getCaIdsucursal(), //Código de la sucursal
                "OcrCode2" => $ccosto_sap->idarea, // Código del área
                "OcrCode3" => str_pad($reg->getUsuCreado()->getDepartamento()->getCaIdsap(),2,"0",STR_PAD_LEFT), // Código del departamento
                "OcrCode4" => $ccosto_sap->idlinea, // Código de la línea
                "OcrCode5" => "",
                "PrjCode"=>$tipoDoc=="RV"?(($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getInoMaster()->getCaReferencia():$datosjson->ca_referencia):$linea->getInoMaster()->getCaReferencia()
            );
        }
           
        $datos["DocumentLines"]=$lin;    
         return  $datos;
    }
    
    public static function enviarWs($idtransaccion='',$user='',$reenvio='no') {
        
        ProjectConfiguration::registerZend();        
        $config = sfConfig::get('app_soap_sap');
        
        $client = new Zend_Soap_Client($config["wsdl_uri"], array('encoding' => 'ISO-8859-1', 'soap_version' => SOAP_1_2));
        
        if($reenvio=="si")
        {
            $q = Doctrine::getTable("IntTransaccionesOut")
                ->createQuery("tr")
                ->select("*")          
                ->where("tr.ca_estado=? and tr.ca_datos is not null and tr.ca_fchcreado>?", array("E",Utils::addDate(date("Y-m-d"), "-1")))
                ->addWhere("ca_idtipo NOT IN (7,8,13,20,10)  ")
                ->orderBy("ca_idtransaccion ASC")
                ->limit(100);
        }
        else
        {
            $q = Doctrine::getTable("IntTransaccionesOut")
                ->createQuery("tr")
                ->select("*")          
                ->where("tr.ca_estado=? and tr.ca_datos is not null ", array("G"))
                ->orderBy("ca_idtransaccion ASC")
                ->limit(100);
        }
        if($idtransaccion && $idtransaccion>0)
        {
            $q->whereIn("tr.ca_idtransaccion", json_decode($idtransaccion));
        }
        
        $transacciones=$q->execute();
        
        
        $result=array();
        if(count($transacciones)>0){            
            foreach($transacciones as $tr)
            {
                $respuesta="";
                try{                
                    eval("\$respuesta = \$client->".$tr->getIntTipos()->getCaMetodo()." ( array('jsonDoc' => \$tr->getCaDatos()  ));");
                    $estado="P";
                    $obj=null;
                    foreach($respuesta as $r)
                    {
                        $obj=utf8_decode($r);
                        $respuestaString=json_encode($obj);
                    }
                }catch(Exception $e)
                {
                    $respuesta=$e->getMessage();
                    $estado="E";
                }            
                $respuesta1=json_decode($obj);
                $respuestaString=json_encode($respuesta1);
                $mensaje_duplicado = strpos(trim($respuesta1->Message),"Ya existe un documento con el numero interno");
                $mensaje_cancelado = strpos(trim($respuesta1->Message),"Document is already cancelled - Object reference not set to an instance of an object");

                if( ($respuesta1->Status=="0" && $tr->getCaIndice1()!="0") || ($respuesta1->Status=="1" && ($mensaje_duplicado !== false||$mensaje_cancelado!== false ) ))
                {
                    switch($tr->getIntTipos()->getCaIdtipo())
                    {
                        case 13:
                        case 7:
                        {
                            $resComp=self::getDocuments(null,array($tr),$respuesta1->DocEntry,$client);
                            if($resComp=="" || !$resComp || $resComp==null)
                            {
                                $result[] = json_decode('{"Status":1, "Message":"No fue posible generar comprobante"}');                                
                                $tr->setCaFchenvio(date("Y-m-d H:i:s"));
                                $tr->setCaRespuesta(stripslashes($respuestaString));
                                $tr->save();
                                return $result;
                            }

                            $respuesta1->Status=0;
                            
                            $resComp=$resComp[0];
                            $comp=null;                        
                            $q = Doctrine::getTable("InoComprobante")
                                    ->createQuery("i")
                                    ->select("*")
                                    ->where("ca_idcomprobante=? ",array($tr->getCaIndice1() ));
                            $comps=$q->execute();                        
                            if(count($comps)<1)
                                continue;
                            $comp=$comps[0];

                            $respuesta1->Consecutivo=(int)$resComp->CodigoDoc;


                            $neto=floatval($resComp->VlrNeto);
                            $imp=floatval($resComp->VlrImpuestos);
                            $trm=floatval($resComp->DocRate);
                            $autoret=floatval($resComp->AutoRetencion);

                            $total=0;
                            $total2=(($neto-$imp)*$trm);

                            foreach($resComp->Lineas as $l)
                            {
                                $v=floatval($l->VlrArticulo);
                                $total+= $v;                                

                                $inodetalle = Doctrine::getTable("InoDetalle")
                                    ->createQuery("i")
                                    ->select("*")
                                    ->where("ca_idcomprobante=? and ca_idconcepto=?",array($comp->getCaIdcomprobante(), $l->ItemCode ))
                                    ->fetchOne();
                                $inodetalle->setCaIdcuenta($l->AcctCode);
                                $inodetalle->save();                                
                            }

                            $datosjson=json_decode(utf8_encode($comp->getCaDatos()));

                            $datosjson->iva=$resComp->VlrImpuestos;
                            $datosjson->rteiva=$resComp->ReteIva;
                            $datosjson->rteica=$resComp->ReteIca;
                            $datosjson->rtefuente=$resComp->ReteFuente;
                            $datosjson->autoretencion=$resComp->AutoRetencion;
                            $datosjson->idtransaccion=$tr->getCaIdtransaccion();                        

                            $options["fecha"] = $resComp->DocDate;
                            $idg = $comp->calcularIdg($options);

                            $idgVal = $idg["val"];
                            $idgEst = $idg["estado"];                            

                            $datosjson->idg->OFC->valor = $idgVal;
                            $datosjson->idg->OFC->estado = $idgEst;
                            if($idgEst==0){
                                $datosjson->idg->OFC->idexclusion = 0;
                            }

                            $comp->setCaDocentry($respuesta1->DocEntry);
                            $conse=ltrim($resComp->CodigoDoc,"0");
                            $comp->setCaConsecutivo($conse);
                            $comp->setCaFchcomprobante($resComp->DocDate);
                            $comp->setCaValor($total);
                            $comp->setCaValor2($neto);
                            $comp->setCaDatos(json_encode($datosjson));
                            $comp->setCaEstado("5");    
                            $comp->setCaUsugenero($user);
                            $comp->setCaFchgenero(date("Y-m-d H:i:s"));
                            
                            $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                            $sql="update ino.tb_comprobantes set ca_estado=5, ca_docentry='".$respuesta1->DocEntry."',
                                ca_consecutivo='".$conse."',ca_fchcomprobante='".$resComp->DocDate."' ,
                                ca_valor='".$total."',ca_valor2='".$neto."' ,
                                ca_datos='".json_encode($datosjson)."',ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                                where ca_idcomprobante='".$tr->getCaIndice1()."'";
                            $st = $con1->execute($sql);
                        }
                        break;
                        case 8:                    
                        {
                            sleep(2);
                            $con = Doctrine_Manager::getInstance()->getConnection('master');
                            $sq="SELECT c.ca_idcomprobante
                                FROM ino.tb_costos c
                                WHERE c.ca_idcomprobante =". $tr->getCaIndice1()." LIMIT 1";
                            $st = $con->execute($sq);
                            $comprobante = $st->fetchAll();
                            
                            //Se valida si ya existe el comprobante para no registrar los datos de costos nuevamente!
                            //exit;
                            if(count($comprobante) <= 0){
                                $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                                $sql="UPDATE ino.tb_comprobantes SET ca_estado=5, ca_docentry='".$respuesta1->DocEntry."',ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                                    where ca_idcomprobante='".$tr->getCaIndice1()."'";
                                $st = $con1->execute($sql);
                                //echo "957:".$sql."<br/>";

                                // Los costos solo aplican para Coltrans y ColOtm
                                if($respuesta1->Company == 'COLTRANS_PROD' || $respuesta1->Company == 'COLOTM_PROD'){

                                    $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                                    $sql1="SELECT d.ca_idmaster, d.ca_idconcepto, c.ca_consecutivo, c.ca_fchcomprobante, c.ca_id, c.ca_idmoneda, c.ca_tcambio, d.ca_cr, c.ca_idcomprobante, d.ca_idhouse, c.ca_usucreado
                                        FROM ino.tb_detalles d
                                                INNER JOIN ino.tb_comprobantes c ON d.ca_idcomprobante = c.ca_idcomprobante
                                        WHERE d.ca_idcomprobante =".$tr->getCaIndice1();
                                    $st = $con1->execute($sql1);
                                    $detalles = $st->fetchAll();

                                    foreach($detalles as $detalle){
                                        $idhouse = $detalle["ca_idhouse"]?$detalle["ca_idhouse"]:'null';
                                        $con2 = Doctrine_Manager::getInstance()->getConnection('master');
                                        $sql2="INSERT INTO ino.tb_costos (ca_idmaster, ca_idcosto, ca_factura, ca_fchfactura, ca_idproveedor, ca_idmoneda, ca_tcambio, ca_tcambio_usd, ca_neto, ca_venta, ca_idcomprobante, ca_idhouse, ca_fchcreado, ca_usucreado) "
                                                . "VALUES (".$detalle["ca_idmaster"].",".$detalle["ca_idconcepto"].",'".$detalle["ca_consecutivo"]."','".$detalle["ca_fchcomprobante"]."',".$detalle["ca_id"].",'".$detalle["ca_idmoneda"]."',".$detalle["ca_tcambio"].",1,".$detalle["ca_cr"].",".round($detalle["ca_cr"]*$detalle["ca_tcambio"], 2, PHP_ROUND_HALF_UP).",".$detalle["ca_idcomprobante"].",".$idhouse.",'".date("Y-m-d H:i:s")."','".$detalle["ca_usucreado"]."')";
                                        //echo $sql2;
                                        $st = $con2->execute($sql2);
                                    }
                                }
                            }
                            
                        }
                        break;
                        case 10:                    
                        {
                            // Elimina los costos si aplica
                            // Los costos solo aplican para Coltrans y ColOtm

                            //$sql="UPDATE ino.tb_comprobantes SET ca_estado=8, ca_docentry='".$respuesta1->DocEntry."',ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                            //    where ca_idcomprobante='".$tr->getCaIndice1()."'";

                            //$st = $con1->execute($sql);
//                            if($respuesta1->Company == 'COLTRANS_PROD' || $respuesta1->Company == 'COLOTM_PROD'){
//
//                                $con1 = Doctrine_Manager::getInstance()->getConnection('master');
//                                $sql1=" SELECT c.ca_idcosto
//                                        FROM ino.tb_costos c
//                                        WHERE c.ca_idcomprobante =".$tr->getCaIndice1();
//                                $st = $con1->execute($sql1);
//                                $costos = $st->fetchAll();
//
//                                if(count($costos)>0){
//                                    foreach($costos as $costo){
//                                        //$idhouse = $detalle["ca_idhouse"]?$detalle["ca_idhouse"]:'null';
//                                        $con2 = Doctrine_Manager::getInstance()->getConnection('master');
//                                        $sql2="DELETE FROM ino.tb_costos WHERE ca_idcosto = ".$costo["ca_idcosto"];
//                                        //echo $sql2;
//                                        $st = $con2->execute($sql2);
//                                    }
//                                }
//                            }
                        }
                        break;
                        case 20:                    
                        {
                            
                            $comprobante=null;                        
                            $q = Doctrine::getTable("InoComprobante")
                                    ->createQuery("i")
                                    ->select("*")
                                    ->where("ca_idcomprobante=? ",array($tr->getCaIndice1() ));
                            $comps=$q->execute();                        
                            if(count($comps)<1)
                                continue;
                            $comprobante=$comps[0];                            
                            $datosjson=json_decode(utf8_encode($comprobante->getCaDatos()));
                            
                                                        
                            
                            $con = Doctrine_Manager::getInstance()->getConnection('master');
                            $sq="SELECT c.ca_idcomprobante
                                FROM ino.tb_costos c
                                WHERE c.ca_idcomprobante =". $tr->getCaIndice1()." LIMIT 1";
                            $st = $con->execute($sq);
                            $comprobantePr = $st->fetchAll();

                            //Se valida si ya existe el comprobante para no registrar los datos de costos nuevamente!
                            //exit;
                            if(count($comprobantePr) <= 0){
                                $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                                $sql="UPDATE ino.tb_comprobantes SET ca_estado=5, ca_docentry='".$respuesta1->DocEntry."',ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                                    where ca_idcomprobante='".$tr->getCaIndice1()."'";
                                $st = $con1->execute($sql);

                                // Los costos solo aplican para Coltrans y ColOtm
                                if($respuesta1->Company == 'COLTRANS_PROD' || $respuesta1->Company == 'COLTRANS_PRUEBA' || $respuesta1->Company == 'COLOTM_PROD'){

                                    $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                                    $sql1="SELECT d.ca_idmaster, d.ca_idconcepto, c.ca_consecutivo, c.ca_fchcomprobante, c.ca_id, c.ca_idmoneda, c.ca_tcambio, d.ca_db, c.ca_idcomprobante, d.ca_idhouse, c.ca_usucreado
                                        FROM ino.tb_detalles d
                                                INNER JOIN ino.tb_comprobantes c ON d.ca_idcomprobante = c.ca_idcomprobante
                                        WHERE d.ca_idcomprobante =".$tr->getCaIndice1();
                                    $st = $con1->execute($sql1);
                                    $detalles = $st->fetchAll();

                                    foreach($detalles as $detalle){
                                        $idhouse = $detalle["ca_idhouse"]?$detalle["ca_idhouse"]:'null';
                                        $neto = $detalle["ca_db"]*-1;
                                        $venta = round($detalle["ca_db"]*$detalle["ca_tcambio"]*-1, 2, PHP_ROUND_HALF_UP);
                                        $con2 = Doctrine_Manager::getInstance()->getConnection('master');
                                        $sql2="INSERT INTO ino.tb_costos (ca_idmaster, ca_idcosto, ca_factura, ca_fchfactura, ca_idproveedor, ca_idmoneda, ca_tcambio, ca_tcambio_usd, ca_neto, ca_venta, ca_idcomprobante, ca_idhouse, ca_fchcreado, ca_usucreado) "
                                                . "VALUES (".$detalle["ca_idmaster"].",".$detalle["ca_idconcepto"].",'".$detalle["ca_consecutivo"]."','".$detalle["ca_fchcomprobante"]."',".$detalle["ca_id"].",'".$detalle["ca_idmoneda"]."',".$detalle["ca_tcambio"].",1,".$neto.",".$venta.",".$detalle["ca_idcomprobante"].",".$idhouse.",'".date("Y-m-d H:i:s")."','".$detalle["ca_usucreado"]."')";
                                        //echo $sql2;
                                        $st = $con2->execute($sql2);
                                    }
                                }   
                            }
                            
                            
                            if($datosjson->collect=="on")
                            {
                                $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                                $sql="UPDATE ino.tb_comprobantes SET ca_estado=5, ca_docentry='".$respuesta1->DocEntry."',ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                                    where ca_idcomprobante='".$tr->getCaIndice1()."'";
                                $st = $con1->execute($sql);

                                if($comprobante->getInoTipoComprobante()->getCaIdempresa()=="2" || $comprobante->getInoTipoComprobante()->getCaIdempresa()=="8" ){

                                    $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                                    $sql1="SELECT d.ca_idmaster, d.ca_idconcepto, d.ca_cr,d.ca_db,d.ca_idhouse
                                        FROM ino.tb_detalles d
                                                INNER JOIN ino.tb_comprobantes c ON d.ca_idcomprobante = c.ca_idcomprobante
                                        WHERE d.ca_idcomprobante =".$tr->getCaIndice1();
                                    $st = $con1->execute($sql1);
                                    $detalles = $st->fetchAll();

                                    $detalles= $comprobante->getInoDetalle();
                                    $data= array();                                        
                                    foreach($detalles as $d){
                                        $valor="0";
                                        $data[$d["ca_idmaster"]]["valor"]+=$valor;
                                        $data[$d["ca_idmaster"]]["concepto"]+=$d["ca_idconcepto"];
                                        $data[$d["ca_idmaster"]]["idhouse"]=$d["ca_idhouse"];
                                    }

                                    foreach($data as $ref=>$d)
                                    {
                                        $sql1="INSERT INTO ino.tb_comprobantes                                                 
                                                (
                                                    ca_idtipo, ca_consecutivo, ca_fchcomprobante, ca_id, 
                                                    ca_observaciones ,
                                                    ca_fchcreado, ca_usucreado, ca_tcambio, ca_estado,
                                                    ca_valor, ca_idmoneda, ca_valor2, ca_idsucursal,
                                                    ca_fchgenero, ca_usugenero, ca_idmaster,
                                                    ca_idhouse,
                                                    ca_idcomprobante_cruce
                                                )
                                                values(
                                                    '99','C-".$comprobante->getCaConsecutivo()."','".$comprobante->getCaFchcomprobante()."','".$comprobante->getCaId()."',
                                                    'Generado Automaticamente desde la NC ".$comprobante->getCaConsecutivo()."-".$comprobante->getCaIdmaster()." : ".$d["concepto"]."',
                                                    '".$comprobante->getCaFchcreado()."','".$comprobante->getCaUsucreado()."','".$comprobante->getCaTcambio()."','5',
                                                    '".$d["valor"]."', '".$comprobante->getCaIdmoneda()."', '".$d["valor"]."', '".$comprobante->getCaIdsucursal()."',
                                                    '".date("Y-m-d H:i:s")."', '".$comprobante->getCaUsugenero()."', '".$ref."',
                                                    '".$d["idhouse"]."', '".$comprobante->getCaIdcomprobante()."'
                                                )";

                                        $st = $con1->execute($sql1);
                                    }
                                }
                            }
                            

                        }
                    }
                    
                }
                else
                {
                    if($respuesta1->Status=="1")
                        $estado="E";
                }
                $tr->setCaEstado($estado);
                $tr->setCaFchenvio(date("Y-m-d H:i:s"));
                $tr->setCaRespuesta(stripslashes($respuestaString));
                $tr->save();
                $result[]=$respuesta1;
            }
        }else{
            $result[] = json_decode('{"Status":1, "Message":"No existen transacciones para enviar. Por favor vefique el Estado de la transaccion es: Generado"}');
        }
        return $result;
    }
    
    private function llenarComprobante($data, $docentry, $comprobante, $user, $tr) {
        
        try{

            $neto=floatval($data->VlrNeto);
            $imp=floatval($data->VlrImpuestos);
            $trm=floatval($data->DocRate);
            $autoret=floatval($data->AutoRetencion);

            $total=0;
            $total2=(($neto-$imp)*$trm);

            foreach($data->Lineas as $l)
            {
                $v=floatval($l->VlrArticulo);
                $total+= $v;            

                $inodetalle = Doctrine::getTable("InoDetalle")
                    ->createQuery("i")
                    ->select("*")
                    ->where("ca_idcomprobante=? and ca_idconcepto=?",array($comprobante->getCaIdcomprobante(), $l->ItemCode ))
                    ->fetchOne();
                $inodetalle->setCaIdcuenta($l->AcctCode);
                $inodetalle->save();                
            }


            $datosjson=json_decode(utf8_encode($comprobante->getCaDatos()));

            $datosjson->iva=$data->VlrImpuestos;
            $datosjson->rteiva=$data->ReteIva;
            $datosjson->rteica=$data->ReteIca;
            $datosjson->rtefuente=$data->ReteFuente;
            $datosjson->autoretencion=$data->AutoRetencion;            

            $options["fecha"] = $data->DocDate;
            $idg = $comprobante->calcularIdg($options);

            $idgVal = $idg["val"];
            $idgEst = $idg["estado"];                            

            $datosjson->idg->OFC->valor = $idgVal;
            $datosjson->idg->OFC->estado = $idgEst;
            if($idgEst==0){
                $datosjson->idg->OFC->idexclusion = 0;
            }


            $conse=ltrim($data->CodigoDoc,"0");
            
            $con1 = Doctrine_Manager::getInstance()->getConnection('master');
            $sql="update ino.tb_comprobantes set ca_estado=5, ca_docentry='".$docentry."',
                ca_consecutivo='".$conse."',ca_fchcomprobante='".$data->DocDate."' ,
                ca_valor='".$total."',ca_valor2='".$neto."' ,
                ca_datos='".json_encode($datosjson)."',ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                where ca_idcomprobante='".$tr->getCaIndice1()."'";
            $st = $con1->execute($sql);
        
            return array("success"=>true);
        }catch(Exception $e){
            return array("success"=>false, "errorInfo"=> utf8_encode($e->getMessage()));
        }
        
    }
    
    public static function getDocuments($idtransaccion='',$transacciones=null,$docEntry='',$client=null)
    {
        if($client==null)
        {
            ProjectConfiguration::registerZend();        
            $config = sfConfig::get('app_soap_sap');        
            $client = new Zend_Soap_Client($config["wsdl_uri"], array('encoding' => 'ISO-8859-1', 'soap_version' => SOAP_1_2));
        }

        if($transacciones==null)
        {
            $q = Doctrine::getTable("IntTransaccionesOut")
                ->createQuery("tr")
                ->select("*")          
                ->addWhere("tr.ca_idtransaccion =? ", $idtransaccion );
            $transacciones=$q->execute();
        }

        foreach($transacciones as $tr)
        {
            
            $comprobante = Doctrine::getTable("InoComprobante")->find($tr->getCaIndice1());
            $tipoComprobante = $comprobante->getInoTipoComprobante();
            $datos["User"] = self::userSap;
            $datos["Password"] = self::passSap;
            $datos["Company"] = $tipoComprobante->getSucursal()->getEmpresa()->getCaPathsap();
            $datos["System"] = "2";
            $datos["NumeroReferencia"] = $comprobante->getInoHouse()->getInoMaster()->getCaReferencia();
            $datos["NumeroInterno"] = $comprobante->getCaIdcomprobante();
            $datos["TipoDoc"] = $tipoComprobante->getCaPrefijoSap();

            $resComp = $client->getDocuments(array('jsonDoc' => json_encode($datos)));

            $respuesta1 = json_decode(utf8_encode($resComp->getDocumentsResult));
        }
        return $respuesta1;
    }
    
    public static function verificarWs($comprobante, $idtransaccion='',$user='',$reenvio='no') {
        
        $conn = Doctrine::getTable("InoComprobante")->getConnection();
        $conn->beginTransaction();
        $transaccion = Doctrine::getTable("IntTransaccionesOut")->createQuery("tr")->select("ca_idtransaccion")->addWhere("tr.ca_idtransaccion =? ", $idtransaccion )->fetchOne();        
        try{
            $resComp=self::getDocuments($idtransaccion);
            if(is_array($resComp) && count($resComp)==0){                
            
                $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                $sql="UPDATE ino.tb_comprobantes SET ca_estado=0, ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                    where ca_idcomprobante='".$comprobante->getCaIdcomprobante()."'";
                $st = $con1->execute($sql);

                $errorInfo = "Este comprobante aún NO ha sido registrado en SAP. Se habilita para que se intente generar nuevamente!";                                
                $transaccion->setCaFchenvio(date("Y-m-d H:i:s"));
                $transaccion->setCaRespuesta('{"Status":1, "Message":"'.$errorInfo.'"}');
                $transaccion->save($conn);

                $conn->commit();
                return array("success" => false, "errorInfo"=> utf8_encode($errorInfo));

            }else if(count($resComp)>0){
                $resComp=$resComp[0];
                $resultado = self::llenarComprobante($resComp, $resComp->DocEntry, $comprobante, $user, $transaccion);

                if($resultado["success"]){
                    return array("success" => true, "resul"=>$resComp);
                }else{
                    return array("success" => false, "errorInfo"=> $resultado["errorInfo"]);
                }
            }else{
                
                $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                $sql="UPDATE ino.tb_comprobantes SET ca_estado=6, ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                    where ca_idcomprobante='".$comprobante->getCaIdcomprobante()."'";
                $st = $con1->execute($sql);
                
                $errorInfo = "El servidor no responde.";                  
                $transaccion->setCaFchenvio(date("Y-m-d H:i:s"));
                $transaccion->setCaRespuesta('{"Status":1, "Message":"'.$errorInfo.'"}');
                $transaccion->save();
            
                return array("success" => false, "errorInfo"=> utf8_encode($errorInfo));
                
            }
        }catch(Exception $e){
            $conn->rollback();
            
            $con1 = Doctrine_Manager::getInstance()->getConnection('master');
            $sql="UPDATE ino.tb_comprobantes SET ca_estado=6, ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                where ca_idcomprobante='".$comprobante->getCaIdcomprobante()."'";
            $st = $con1->execute($sql);

            $errorInfo = "No se pudo conectar con el servidor.";  
            $errorInfo.= utf8_encode($e->getMessage());
            $transaccion->setCaFchenvio(date("Y-m-d H:i:s"));
            $transaccion->setCaRespuesta('{"Status":1, "Message":"'.$errorInfo.'"}');
            $transaccion->save();
            
            return array("success" => false, "errorInfo"=> utf8_encode($e->getMessage()));
        }
    }
    
    public static function getDocumentsxParam($params)
    {
        
        ProjectConfiguration::registerZend();        
        $config = sfConfig::get('app_soap_sap');        
        $client = new Zend_Soap_Client($config["wsdl_uri"], array('encoding' => 'ISO-8859-1', 'soap_version' => SOAP_1_2));

        $datos["User"]= self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $params["Company"];
        $datos["System"]="2";
        $datos["NumeroReferencia"]=$params["NumeroReferencia"];
        
        $datos["TipoDoc"]=$params["TipoDoc"];
        
        $resComp=$client->getDocuments(array('jsonDoc' =>json_encode($datos)));
        $respuesta1=json_decode($resComp->getDocumentsResult);
        
        return $respuesta1;
    }


    public function jsonAnulacion()
    {
        $reg = Doctrine::getTable("InoComprobante")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();   
        
        if(!$reg)
            return null;
        
        $tipoComprobante = Doctrine::getTable("InoTipoComprobante")->find($reg->getCaIdtipo());       
        
        $datos["User"]= self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $tipoComprobante->getSucursal()->getEmpresa()->getCaPathsap(); 
        $datos["System"]="2";       
        $datos["Series"] = $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap();
        $datos["CodigoDoc"] =$tipoComprobante->getCaPrefijoSap();
        $datos["DocEntry"] = $reg->getCaDocentry();
        return  $datos;
    }
    
    public static function reporteErrores() {
        $sql = "select tr.ca_idtransaccion, tr.ca_idtipo, tr.ca_indice1, tp.ca_nombre, tp.ca_indice1 as ca_campo, tr.ca_datos, tr.ca_fchenvio, tr.ca_respuesta, tr.ca_estado "
                . "from integracion.tb_transaccionesout tr "
                . "inner join integracion.tb_tipos tp on tp.ca_idtipo = tr.ca_idtipo "
                . "where ca_estado = 'E'";

        $con = Doctrine_Manager::getInstance()->connection();
        $st = $con->execute($sql);

        $transacciones = $st->fetchAll();

        $html = "<p>" . chr(13)
                . "Alerta en Integración: " . chr(13)
                . "Existente Registros en módulo de integración Colsys - SAP BO, que han retornado error. A continuación se relacionan los eventos:" . chr(13)
                . "<br />" . chr(13)
                . "<table>" . chr(13);
        foreach ($transacciones as $tr) {
            $html .= "<tr>" . chr(13);
            $html .= "  <th>Indice 1<th>" . chr(13);
            $html .= "  <th>Detalle<th>" . chr(13);
            $html .= "  <th>Fecha Envío<th>" . chr(13);
            $html .= "  <th>Datos<th>" . chr(13);
            $html .= "  <th>Respuesta<th>" . chr(13);
            $html .= "</tr>" . chr(13);
            $html .= "<tr>" . chr(13);
            $html .= " <td>" . $tr["ca_indice1"] . "</td>" . chr(13);
            if (in_array($tr["ca_nombre"], array("ReferenciasCreacion", "ReferenciasUtilidad", "ReferenciasCostos", "ReferenciasActualizacion"))) {
                $html .= "<td><strong>Referencia:<strong><br />" . $tr["ca_indice1"] . "</td>" . chr(13);
            } else if (in_array($tr["ca_nombre"], array("Clientes", "Proveedores", "Agentes"))) {
                $sql = "select ca_id, ca_nombre, ca_idalterno from ids.tb_ids where ca_id = " . $tr["ca_indice1"];
                $st = $con->execute($sql);
                $cliente = $st->fetchAll();
                if ($cliente) {
                    $html .= "<td><strong>" . $tr["ca_nombre"] . ":<strong><br />" . $cliente[0]["ca_nombre"] . " Nit :" . $cliente[0]["ca_idalterno"] . "</td>" . chr(13);
                } else {
                    $html .= "<td><strong>Indice:<strong><br />" . $tr["ca_indice1"] . "</td>" . chr(13);
                }
            } else if ($tr["ca_nombre"] == "Empleados") {                
                $sql = "select ca_login, ca_nombre, ca_docidentidad from control.tb_usuarios where ca_login = '" . $tr["ca_indice1"] . "'";
                $st = $con->execute($sql);
                $usuario = $st->fetchAll();
                if ($usuario) {
                    $html .= "<td><strong>Empleado :<strong><br />" . $usuario[0]["ca_nombre"] . " Identificación :" . $usuario[0]["ca_docidentidad"] . "</td>" . chr(13);
                } else {
                    $html .= "<td><strong>Indice:<strong><br />" . $tr["ca_indice1"] . "</td>" . chr(13);
                }
            } else if ($tr["ca_nombre"] == "Conceptos") {
                $sql = "select ca_idconcepto, ca_concepto from ino.tb_conceptos where ca_idconcepto = '" . $tr["ca_indice1"] . "'";
                $st = $con->execute($sql);
                $concepto = $st->fetchAll();
                if ($concepto) {
                    $html .= "<td><strong>Concepto:<strong><br />" . $concepto[0]["ca_concepto"] . "</td>" . chr(13);
                } else {
                    $html .= "<td><strong>Indice:<strong><br />" . $tr["ca_indice1"] . "</td>" . chr(13);
                }
            } else if (in_array($tr["ca_nombre"], array("FacturasV", "FacturasC", "Anulacion", "NotasCredito"))) {
                // $comprobante = Doctrine::getTable("InoComprobante")->findOneBy("ca_idcomprobante", $tr["ca_indice1"]);
                $sql = "select ca_idcomprobante, ca_consecutivo from ino.tb_comprobantes where ca_idcomprobante = '" . $tr["ca_indice1"] . "'";
                $st = $con->execute($sql);
                $comprobante = $st->fetchAll();
                if ($comprobante) {
                    $html .= "<td><strong>Comprobante:<strong><br />" . $comprobante[0]["ca_consecutivo"] . "</td>" . chr(13);
                } else {
                    $html .= "<td><strong>Indice:<strong><br />" . $tr["ca_indice1"] . "</td>" . chr(13);
                }
            }
            $html .= " <td>" . $tr["ca_fchenvio"] . "</td>" . chr(13);
            $html .= " <td>" . $tr["ca_datos"] . "</td>" . chr(13);
            $html .= " <td>" . $tr["ca_respuesta"] . "</td>" . chr(13);
            $html .= "</tr>" . chr(13);
        }
        $html .= "</table>";

        $email = new Email();
        $email->setCaUsuenvio("Administrador");
        $email->setCaTipo("Error Integracion");
        $email->setCaFrom("nagios@correo.colsys.coltrans.com.co");
        $email->setCaFromname("Colsys Notificaciones");
        $email->setCaSubject(date("Y-m-d") . ": Registros Integracion con Error");
        $email->addTo("admin@coltrans.com.co");

        $email->setCaBodyhtml($html);
        $email->save();
        return $html;
    }    
    
     /*OK REVISADO JUL/31/2017*/
    public function jsonNotasCreditoProv(){
    
        $reg = Doctrine::getTable("InoComprobante")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
        
        if(!$reg)
            return null;
    
        $tipoComprobante = Doctrine::getTable("InoTipoComprobante")->find($reg->getCaIdtipo());
        $tipoDoc = $tipoComprobante->getCaPrefijoSap();
        $ccostos = Doctrine::getTable("InoCentroCosto")->find($reg->getCaIdccosto());
        
        $datos["user"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $tipoComprobante->getSucursal()->getEmpresa()->getCaPathsap(); // Pendiente definir en tabla de empresas los Id de SAP
        $datos["System"]="2";
        
        $datos["TipoDoc"]=$tipoDoc;
        $datos["CodigoDoc"] = utf8_encode($tipoComprobante->getCaTipo());
        $datos["Series"] = $tipoComprobante->getCaComprobante();
        $datos["NumeroInterno"] = $reg->getCaIdcomprobante();
        
        $cardcode=$reg->getIds()->getCaIdalterno();
        if(($reg->getIds()->getCaDv()>-1))
            $cardcode.="-".$reg->getIds()->getCaDv();
        
        $datos["CardCode"] = $cardcode;
        
        
        $datos["DocDate"] = date("Y/m/d",strtotime($reg->getCaFchcomprobante()));//date("Y/m/d");
        
        $datos["TaxDate"] = date("Y/m/d",strtotime($reg->getCaFchcomprobante()));//date("Y/m/d");
        if($reg->getCaPlazo()<1)
            $plazo=0;
        $datos["DocDueDate"] = date('Y/m/d', strtotime($reg->getCaFchcomprobante(). ' + '.($plazo).' days')); // Pendiente asociar el plazo con el asignado al proveedor        
        $datos["NumAtCard"] = $reg->getCaConsecutivo();        
        $datos["Comments"] = ($reg->getCaObservaciones()!="")?$reg->getCaObservaciones():"";        
        $datos["SlpCode"] = $reg->getInoHouse()->getVendedor()->getCaDocidentidad();//"-1"; // Código empleado de ventas        
        $datos["DocCur"] = $reg->getCaIdmoneda();
        $datos["DocRate"] = $reg->getCaTcambio();
        $datos["PrjCode"] = $reg->getInoHouse()->getInoMaster()->getCaReferencia();
        
        /*Solicitud Sandra Orjuela May 23, 2019, 10:50 AM */
        if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Cartagena")
            $datos["Destino"] = "8P";
        else if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Buenaventura")
            $datos["Destino"] = "6P";
        else
            $datos["Destino"] = "";
        
        $lineas=$reg->getInoDetalle();
        $ccosto_sap = json_decode($ccostos->getCaCcostosap());
        $lin=array();

        foreach($lineas as $linea){
            $lin[]=array(
                "ItemCode"=> utf8_encode($linea->getCaIdconcepto()),
                "Quantity" => $linea->getCaDb()<0?-1:1,
                "UnitPrice" => $linea->getCaDb()<0?$linea->getCaDb()*-1:$linea->getCaDb(),
                "OcrCode" => $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap(),//$reg->getInoTipoComprobante()->getCaIdsucursal(), //Código de la sucursal
                "OcrCode2" => $ccosto_sap->idarea, // Código del área
                "OcrCode3" => str_pad($reg->getUsuCreado()->getDepartamento()->getCaIdsap(),2,"0",STR_PAD_LEFT), // Código del departamento
                "OcrCode4" => $ccosto_sap->idlinea, // Código de la línea
                "OcrCode5" => "",
                "PrjCode"=>$tipoDoc=="V"?$reg->getInoHouse()->getInoMaster()->getCaReferencia():$linea->getInoMaster()->getCaReferencia()                
            );
        }

        $datos["DocumentLines"]=$lin;    
         return  $datos;
    }
}