<?php

/**
 * IntTransaccionesOut
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class IntTransaccionesOut extends BaseIntTransaccionesOut
{
    //{"User": "manager", "System": "2", "Company": "1", "DocEntry":"193",  "Password": "912e79cd13c64069d91da65d62fbb78c", "TipoDoc":"V"}
    const userSap="manager";
    //const passSap="9876";
    const passSap="912e79cd13c64069d91da65d62fbb78c";
    

     public static function procesarTransacciones($idtipo,$indice) {
        $idtransaccion = null;
        $q = Doctrine::getTable("IntTransaccionesOut")
                            ->createQuery("tr")
                            ->select("*")
                            ->innerJoin("tr.IntTipos s");

        if( $idtipo!=""  &&  $indice!="" )
        {
            $q->addWhere("tr.ca_idtipo = ? and ca_indice1=?", array($idtipo,$indice));
        }
        else
            $q->addWhere("tr.ca_estado=? AND tr.ca_datos IS NULL AND ca_idtipo NOT IN (7,8,13,20) ", "A");
        
        $transacciones =$q->execute();
        //echo $q->getSqlQuery();        
        //echo "<br>".count($transacciones)."<br>";
        //exit();
        foreach($transacciones as $tr)
        {            
            $datos=null;
            eval("\$datos=\$tr->json".$tr->getIntTipos()->getCaNombre()."();");
            $idtransaccion=$tr->getCaIdtransaccion();
            
            //echo "idt".$idtransaccion;
            //exit();
            if($datos!=null)
            {
                $tr->setCaEstado("G");
                $tr->setCaDatos(json_encode($datos));                
                $tr->save();
            }
        }        
        return $idtransaccion;
        
        //$this->responseArray = array("id" => "1", "success" => $success);
        //$this->setTemplate("responseTemplate");        
    }
    
     /*OK REVISADO JUL/31/2017*/
    public function jsonFacturasV(){
        
        
        $reg = Doctrine::getTable("InoComprobante")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
        
        $tipoComprobante = Doctrine::getTable("InoTipoComprobante")->find($reg->getCaIdtipo());
        $ccostos = Doctrine::getTable("InoCentroCosto")->find($reg->getCaIdccosto());
        
        $datos["User"]= self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $tipoComprobante->getSucursal()->getEmpresa()->getCaIdsap(); 
        $datos["System"]="2";
        
        $datos["TipoDoc"]="V";
        $datos["CodigoDoc"] = utf8_encode($tipoComprobante->getCaTipo());
        $datos["Series"] = $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap();//"14";//$tipoComprobante->getCaComprobante();
        $datos["NumeroInterno"] = $reg->getCaIdcomprobante();//$reg->getCaConsecutivo();        
        
        $cardcode=$reg->getIds()->getCaIdalterno();
        if(($reg->getIds()->getCaDv()>-1))
            $cardcode.="-".$reg->getIds()->getCaDv();
         //(($reg->getIds()->getCaDv()!="")?"-".$reg->getIds()->getCaDv():"");
        $datos["CardCode"] = $cardcode;
        
        $datos["DocDate"] = date("Y/m/d");
        if($reg->getCaPlazo()<1 || $reg->getCaPlazo()=== null)
            $plazo=0;
        else
            $plazo=$reg->getCaPlazo();
        
        $datos["DocDueDate"] = date('Y/m/d', strtotime($reg->getCaFchcomprobante(). ' + '.($plazo).' days')); // Pendiente asociar el plazo con el asignado al proveedor
        $datos["TaxDate"] = date("Y/m/d");
        $datos["NumAtCard"] = "";//$reg->getInoHouse()->getInoMaster()->getCaReferencia();
        $datos["PrjCode"] = ($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getInoMaster()->getCaReferencia():"";
        $datos["Comments"] = utf8_encode($reg->getCaObservaciones());
        $datos["SlpCode"] = ($reg->getIds()->getIdsCliente()->getUsuario()->getCaDocidentidad()!="")?$reg->getIds()->getIdsCliente()->getUsuario()->getCaDocidentidad():"-1";
        $datos["DocCur"] = $reg->getCaIdmoneda();
        $datos["DocRate"] = $reg->getCaTcambio();
        $datos["DocTransporte"] = ($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getCaDoctransporte():"";
        $datos["PedCliente"] = utf8_encode(substr($reg->getInoHouse()->getReporte()->getCaOrdenClie(),0,10));
        $datos["BienesTransp"] = utf8_encode(substr($reg->getInoHouse()->getReporte()->getCaMercanciaDesc(),0,49)); 
        $datos["Trayecto"] = utf8_encode($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()." - ".$reg->getInoHouse()->getInoMaster()->getDestino()->getCaCiudad());
        $datos["Anexos"] = $reg->getProperty("anexos");
        $datos["Detalle"] = $reg->getProperty("detalle");
        $datos["Peso"] = ($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getInoMaster()->getCaPeso():"0";
        $datos["Piezas"] = ($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getInoMaster()->getCaPiezas():"0";
        $datos["Volumen"] = ($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getInoMaster()->getCaVolumen():"0";
        $datos["Nave"] = ($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getInoMaster()->getCaMotonave():"";
        $datos["Sucursal"] = $tipoComprobante->getSucursal()->getCaIdsap();//"1";//$reg->getInoTipoComprobante()->getCaIdsucursal();//1 bogota
        //$datos["Destino"] = $tipoComprobante->getSucursal()->getCaIdsap();// "";// Pendiente por definir
        
        if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Cartagena" || $reg->getInoHouse()->getInoMaster()->getDestino()->getCaCiudad()=="Cartagena")
            $datos["Destino"] = "8";
        else if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Buenaventura" || $reg->getInoHouse()->getInoMaster()->getDestino()->getCaCiudad()=="Buenaventura")
            $datos["Destino"] = "6";// "";// Pendiente por definir
        else
            $datos["Destino"] = $tipoComprobante->getSucursal()->getCaIdsap();// "";// Pendiente por definir
        
        $datosJson=json_decode($reg->getCaDatos());
        foreach($datosJson->idanticipo as $a)
        {
            if($a>0)
            {
                $anticipo = Doctrine::getTable("InoComprobante")->find($a);
                if ($anticipo) {
                    $datos["Anticipos"][]=array("DocEntry"=>$anticipo->getCaDocentry());
                }
            }
        }
        
        
        if($reg->getInoComprobanteCruce())
        {
            
        }

        $lineas=$reg->getInoDetalle();
        
        $ccosto_sap = json_decode($ccostos->getCaCcostosap());
        $lin=array();        
        
        foreach($lineas as $linea){
            $lin[]=array(
                "ItemCode"=> utf8_encode($linea->getCaIdconcepto()),
                "Quantity" => 1,
                "UnitPrice" => $linea->getCaCr(),
                "OcrCode" => $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap(),//$reg->getInoTipoComprobante()->getCaIdsucursal(), //Código de la sucursal
                "OcrCode2" => $ccosto_sap->idarea, // Código del área
                "OcrCode3" => str_pad($reg->getUsuCreado()->getDepartamento()->getCaIdsap(),2,"0",STR_PAD_LEFT), // Código del departamento
                "OcrCode4" => $ccosto_sap->idlinea, // Código de la línea
                "OcrCode5" => "",
                "PrjCode" => ($reg->getCaIdhouse()>0)?$reg->getInoHouse()->getInoMaster()->getCaReferencia():""
                //$reg->getInoHouse()->getInoMaster()->getCaReferencia()
                        );
        }
        
        
        $datos["DocumentLines"]=$lin;
        return  $datos;
        
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonFacturasC(){
        //echo $this->getCaIndice1();
        $reg = Doctrine::getTable("InoComprobante")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
        
        
       
        $tipoComprobante = Doctrine::getTable("InoTipoComprobante")->find($reg->getCaIdtipo());
        $ccostos = Doctrine::getTable("InoCentroCosto")->find($reg->getCaIdccosto()); 
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $tipoComprobante->getSucursal()->getEmpresa()->getCaIdsap();
        $datos["System"]="2";
        
        $datos["TipoDoc"]="C";
        $datos["CodigoDoc"] = "PU";//Factura de proveedores --Leyenda de abreviaturas de tipos de transacción 
        $datos["Series"] = $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap(); // Pendiente definir la serie de SAP
        $datos["NumeroInterno"] = $reg->getCaIdcomprobante();        
        $cardcode=$reg->getIds()->getCaIdalterno();
        if(($reg->getIds()->getCaDv()>-1))
            $cardcode.="-".$reg->getIds()->getCaDv();
         //(($reg->getIds()->getCaDv()!="")?"-".$reg->getIds()->getCaDv():"");
        $datos["CardCode"] = $cardcode;
        //$datos["DocDate"] = date("Y/m/d");
        $datos["DocDate"] = date("Y/m/d",strtotime($reg->getCaFchcomprobante()));//date("Y/m/d");
        $datos["TaxDate"] = date("Y/m/d",strtotime($reg->getCaFchcomprobante()));
        if($reg->getCaPlazo()<1)
            $plazo=0;
        else
            $plazo=$reg->getCaPlazo();
        $datos["DocDueDate"] = date('Y/m/d', strtotime($reg->getCaFchcomprobante(). ' + '.($plazo).' days')); // Pendiente asociar el plazo con el asignado al proveedor
        //$datos["DocDueDate"]= date('Y/m/d', strtotime($reg->getCaFchcomprobante(). ' + '.($reg->getCaPlazo()+1).' days')); // Pendiente asociar el plazo con el asignado al proveedor        
        $datos["NumAtCard"] = $reg->getCaConsecutivo();
        $datos["SlpCode"] = "-1"; // Código empleado de ventas
        $datos["DocCur"] = $reg->getCaIdmoneda();//revisar tipos de moneda de SAP
        $datos["DocRate"] = $reg->getCaTcambio();
        $datos["Sucursal"] = $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap();
        
        //$datos["Destino"] = $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap();// Pendiente por definir
        if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Cartagena")
            $datos["Destino"] = "8";
        else if($reg->getInoHouse()->getInoMaster()->getOrigen()->getCaCiudad()=="Buenaventura")
            $datos["Destino"] = "6";// "";// Pendiente por definir
        else
            $datos["Destino"] = $tipoComprobante->getSucursal()->getCaIdsap();// "";// Pendiente por definir
        
        $datos["Comments"]="";
        
        //Lineas        //TODO 
        /*$lineas = Doctrine::getTable("InoDetalle")
                ->createQuery("d")
                ->select("*")
                ->where($transaccion->getIntTipos()->getIndice1()."= ?", $reg->getCaIdcomprobante())
                ->execute();
         * 
         */
        
        $lin=array();
        $lineas=$reg->getInoDetalle();
        
        $ccosto_sap = json_decode($ccostos->getCaCcostosap());
         foreach($lineas as $linea){
            $lin[]=array(
                "ItemCode"=> utf8_encode($linea->getCaIdconcepto()),
                "Quantity" => $linea->getCaCr()<0?-1:1,
                "UnitPrice" => $linea->getCaCr()<0?$linea->getCaCr()*-1:$linea->getCaCr(),
                "OcrCode" => $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap(),//$reg->getInoTipoComprobante()->getCaIdsucursal(), //Código de la sucursal
                "OcrCode2" => $ccosto_sap->idarea, // Código del área
                "OcrCode3" => str_pad($reg->getUsuCreado()->getDepartamento()->getCaIdsap(),2,"0",STR_PAD_LEFT), // Código del departamento
                "OcrCode4" => $ccosto_sap->idlinea, // Código de la línea
                "OcrCode5" => "",
                "PrjCode" => $linea->getInoMaster()->getCaReferencia()
                // Pendiente definir con SAP. Código de la compa?ía            
                        );
        }
        $datos["DocumentLines"]=$lin;       
        return  $datos;
    }
    
    
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonReferenciasCreacion() {
        
        $master = Doctrine::getTable("InoMaster")
                          ->createQuery("m")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                          ->fetchOne();
        
        
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datosJson = json_decode($master->getCaDatos());
        if($datosJson->idempresa>0)
            $company=$datosJson->idempresa;
        else
            $company=2;
        
        $empresa = Doctrine::getTable("Empresa")->find($company);
        $datos["Company"]= $empresa->getCaIdsap();
        $datos["System"]="2";
        $datos["PrjCode"]=$master->getCaReferencia();
        $datos["PrjName"]=utf8_encode($master->getCaImpoexpo()."-".$master->getCaTransporte());
        $datos["ValidFrom"]=date("Y/m/d");
        $datos["Estado"]="A";        
        
         return  $datos;
        
    }
    
    
    public function jsonReferenciasActualizacion() {
        
        $master = Doctrine::getTable("InoMaster")
                          ->createQuery("m")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                          ->fetchOne();
        
        $estado= "C";
        if($master->getCaFchcerrado()=="")
            $estado= "A";
        /*if($master->getCaFchliquidado()!="")
            $estado= "L";*/
        if($master->getCaFchanulado()!="")
            $estado= "AN";
        
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datosJson = json_decode($master->getCaDatos());
        if($datosJson->idempresa>0)
            $company=$datosJson->idempresa;
        else
            $company=2;
        
        $empresa = Doctrine::getTable("Empresa")->find($company);
        $datos["Company"]= $empresa->getCaIdsap();
        
        //$datos["Company"]= $master->getUsuCreado()->getSucursal()->getEmpresa()->getCaIdsap();
        $datos["System"]="2";
        $datos["PrjCode"]=$master->getCaReferencia();
        $datos["PrjName"]=utf8_encode($master->getCaImpoexpo()."-".$master->getCaTransporte());
        //$datos["ValidFrom"]=date("Y/m/d");
        $datos["ValidFrom"]="";//cambio por solicitud de Nicolas y Andrea de seidor 2017-10-30
        $datos["Estado"]=$estado;
         return  $datos;
    }

    /*OK REVISADO JUL/31/2017*/
    public function jsonClientes() {

        $q = Doctrine::getTable("Cliente")
                          ->createQuery("c")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1());
        
        $reg=$q->fetchOne();
                          
        $empresa = Doctrine::getTable("Empresa")->findOneBy("ca_idsap",$this->getCaIndice2());
        $credito = Doctrine::getTable("IdsCredito")
                          ->createQuery("c")
                          ->select("*")
                          ->where("ca_id = ?", $this->getCaIndice1())
                          ->addWhere("ca_tipo = ?", "C")
                          ->addWhere("ca_idempresa = ?", $empresa->getCaIdempresa())
                          ->fetchOne();
        $CreditLimit = ($credito)?$credito->getCaCupo():0;
        $ndias=($credito)?$credito->getCaDias():0;
                          
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= ($this->getCaIndice2())?$this->getCaIndice2():"1";
        $datos["System"]="2";
        $datos["CardCode"]="C".$reg->getCaIdalterno();
        $datos["CardName"]=utf8_encode($reg->getCaCompania());
        $datos["CardFName"]=utf8_encode($reg->getCaCompania()); // Nombre Extranjero
        $datos["CardType"]="0";  // Tipo SN 0: Cliente 1: Proveedor 2: Lead      
        $datos["GroupCode"]="2";  // Código de grupo de socios de negocio
        $datos["CreditLimit"]=$CreditLimit;
        $datos["Fax"]="";
        $datos["Phone1"]=substr($reg->getCaTelefonos(), 0, 20);
        $datos["GroupNum"]=$ndias; //Condición de pago. Revisar tabla de condiciones de pago
        $LicTradNum = $reg->getCaIdalterno();   // Sep14-2017 Si no es Persona N debe llevar digito de verificación separado por guión
        if ($reg->getCaDigito() !== null) {
            $LicTradNum.= "-".$reg->getCaDigito();
        }
        $datos["LicTradNum"]=$LicTradNum; //Número de indentificación fiscal
        $datos["Country"]=substr($reg->getIds()->getIdsTipoIdentificacion()->getCaIdtrafico(), 0, 2);   // Sep14-2017 se implementa el pais para idenficar los extranjeros
        $datos["SlpCode"]=($reg->getUsuario()->getCaDocidentidad()!="")?$reg->getUsuario()->getCaDocidentidad():"-1";
        $datos["E_Mail"]=$reg->getCaEmail();
        $datos["frozenFor"]="1"; //Activo 0: No 1: Si
        $datos["DebPayAcct"] = ""; // Pendiente
        $datos["Estado"]="N"; //Y: SI N: NO
        $datos["Empleado"] = "N"; //Se indica si el socio de negocio es un empleado de venta
        
        $datos["Addresses"]=$this->getJsonDireContac($reg->getIds());        
        $datos["Contacts"]=$this->getJsonContactos($reg->getIds());
        $datos["BankAccounts"] = $this->getJsonBancos($reg->getIds());
        
         return  $datos;
    }
    
     /*OK REVISADO JUL/31/2017*/
    public function jsonAgentes() {
        
         $reg = Doctrine::getTable("Ids")
                          ->createQuery("i")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                          ->fetchOne();

        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]="1";
        $datos["System"]="2";

        $datos["CardCode"]="P".$reg->getCaIdalterno();        
        $datos["CardName"]=utf8_encode($reg->getCaNombre());
        $datos["CardFName"]=utf8_encode($reg->getCaNombre());
        $datos["CardType"]="1";  // Tipo SN 0: Cliente 1: Proveedor 2: Lead      
        $datos["GroupCode"]="145";
        $datos["CreditLimit"]="0";
        $datos["Fax"]="";
        $datos["Phone1"]=$reg->getSucursalPrincipal()->getCaTelefonos()?substr($reg->getSucursalPrincipal()->getCaTelefonos(), 0, 20):"";
        $datos["GroupNum"]="0"; //Condición de pago. Revisar tabla de condiciones de pago
        $LicTradNum = $reg->getCaIdalterno();   // Sep14-2017 Si no es Persona N debe llevar digito de verificación separado por guión
        if ($reg->getCaDv()) {
            $LicTradNum.= "-".$reg->getCaDv();
        }
        $datos["LicTradNum"]=$LicTradNum;
        $datos["Country"]=substr($reg->getIdsTipoIdentificacion()->getCaIdtrafico(), 0, 2);   // Sep14-2017 se implementa el pais para idenficar los extranjeros
        $datos["SlpCode"]="-1"; //Número de empleado de ventas
        $datos["E_Mail"]="";
        $datos["frozenFor"]="1"; //Activo 0: No 1: Si
        $datos["DebPayAcct"] = ""; // Pendiente
        $datos["Estado"]="N";
        $datos["Empleado"] = "N"; //Se indica si el socio de negocio es un empleado de venta

        $datos["Addresses"]=$this->getJsonDireContac($reg);
        $datos["Contacts"]=$this->getJsonContactos($reg);
        $datos["BankAccounts"] = $this->getJsonBancos($reg);

         return  $datos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonProveedores() {
        
         $reg = Doctrine::getTable("Ids")
                          ->createQuery("i")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                          ->fetchOne();

        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= ($this->getCaIndice2())?$this->getCaIndice2():"1";
        $datos["System"]="2";

        $datos["CardCode"]="P".$reg->getCaIdalterno();
        $datos["CardName"]=utf8_encode($reg->getCaNombre());
        $datos["CardFName"]=utf8_encode($reg->getCaNombre());
        $datos["CardType"]="1";  // Tipo SN 0: Cliente 1: Proveedor 2: Lead  
        $datos["GroupCode"]=($reg->getIdsProveedor()->getCaIdclasificacion()!="")?$reg->getIdsProveedor()->getCaIdclasificacion():"1";  // Código de grupo de socios de negocio
        //$datos["Estado"]="N"; //Y: SI N: NO
        $datos["CreditLimit"]="0";
        $datos["Fax"]="";
        $datos["Phone1"]=$reg->getSucursalPrincipal()->getCaTelefonos()?substr($reg->getSucursalPrincipal()->getCaTelefonos(), 0, 20):"";
        $datos["GroupNum"]="0"; //Condición de pago. Revisar tabla de condiciones de pago
        $LicTradNum = $reg->getCaIdalterno();   // Sep14-2017 Si no es Persona N debe llevar digito de verificación separado por guión
        if ($reg->getCaDv()) {
            $LicTradNum.= "-".$reg->getCaDv();
        }
        $datos["LicTradNum"]=$LicTradNum;
        $datos["Country"]=substr($reg->getIdsTipoIdentificacion()->getCaIdtrafico(), 0, 2);   // Sep14-2017 se implementa el pais para idenficar los extranjeros
        $datos["SlpCode"]="-1"; //Número de empleado de ventas
        $datos["E_Mail"]="";
        $datos["frozenFor"]="1"; //Activo 0: No 1: Si
        $datos["DebPayAcct"] = ""; // Pendiente
        $datos["Empleado"] = "N"; //Se indica si el socio de negocio es un empleado de venta

        $datos["Addresses"]=$this->getJsonDireContac($reg);
        $datos["Contacts"]=$this->getJsonContactos($reg);
        $datos["BankAccounts"] = $this->getJsonBancos($reg);

        return  $datos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonEmpleados() {
        
         $q = Doctrine::getTable("Usuario")
                          ->createQuery("u")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1());
         //echo $transaccion->getCaIndice1();
           //               echo $q->getSqlQuery();
                          $reg=$q->fetchOne();

        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $reg->getCargo()->getCaVentas()===true?$this->getCaIndice2():$reg->getSucursal()->getEmpresa()->getCaIdsap();
        $datos["System"]="2";
        $datos["CardCode"]="E".$reg->getCaDocidentidad();
        $datos["CardName"]=utf8_encode($reg->getCaNombre());
        $datos["CardFName"]=utf8_encode($reg->getCaNombre());
        $datos["CardType"]="1";  // Tipo SN 0: Cliente 1: Proveedor 2: Lead      
        $datos["GroupCode"]="144";  // Código de grupo de socios de negocio
        $datos["CreditLimit"]="0";
        $datos["Fax"]="";
        $datos["Phone1"]=utf8_encode(substr($reg->getSucursal()->getCaTelefono(),0,20) );
        $datos["GroupNum"]="0"; 
        $datos["LicTradNum"]=utf8_encode($reg->getCaDocidentidad());
        $datos["SlpCode"]="-1"; //Número de empleado de ventas
        $datos["E_Mail"]=utf8_encode($reg->getCaEmail());
        $datos["frozenFor"]="1"; //Activo 0: No 1: Si
        $datos["DebPayAcct"] = ""; // Pendiente
        $datos["Estado"]="N"; //Y: SI N: NO
        $datos["Empleado"] = $reg->getCargo()->getCaVentas()===true?"Y":"N"; //Se indica si el socio de negocio es un empleado de venta

        return  $datos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function getJsonDireContac($ids)
    {
        $dir=$contactos=array();
        $suc=$ids->getIdsSucursal();
        foreach($suc as  $k=>$s)
        {
            $country= explode("-", $s->getCiudad()->getTrafico()->getCaIdtrafico());  //explode("-",utf8_encode($s->getCiudad()->getTrafico()->getCaIdtrafico()));
            $dir[$k]["Address"] = utf8_encode($s->getCiudad()->getCaCiudad()). " ".$s->getCaIdsucursal();
            $dir[$k]["AddrType"]="";//TODO
            $dir[$k]["Street"]=utf8_encode($s->getCaDireccion());
            $dir[$k]["City"]=utf8_encode($s->getCiudad()->getCaCiudad());
            $dir[$k]["County"]=($s->getCiudad()->getCaIdtrafico()=='CO-057')?utf8_encode($s->getCiudad()->getCaDivipola()):'99999';
            $dir[$k]["Country"]=$country[0];//utf8_encode($s->getCiudad()->getTrafico()->getCaIdtrafico());
        }
        return $dir;
    }

    /*OK REVISADO JUL/31/2017*/
    public function getJsonContactos($ids)
    {
        $contactos=array();
        $suc=$ids->getIdsSucursal();
        $l=0;
        foreach($suc as  $k=>$s)
        {
            if($s->count()>0)
            {
                $con=$s->getIdsContacto();
                foreach($con as  $j=>$c)
                {
                    //if($c->getCaActivo()) {      /* Sep 19/2017 Se reportan todos los contactos y se envía la marca de Activo o Inactivo */

                        $pos=strpos(trim($c->getCaNombres()), " ");
                        if($pos>0)
                        {
                            $pnombre= substr($c->getCaNombres(), 0,$pos-1);
                            $snombre= substr($c->getCaNombres(), $pos, (strlen($c->getCaNombres())-$pos));
                        } else { 
                            $pnombre= trim($c->getCaNombres());
                            $snombre= "";
                        }                        
                        //$nombre=
                        $contactos[$l]["Name"]="{$c->getCaIdcontacto()}";
                        $contactos[$l]["Position"]=utf8_encode($c->getCaCargo());
                        $contactos[$l]["FirstName"]=utf8_encode($pnombre);
                        $contactos[$l]["MiddleName"]= utf8_encode($snombre);
                        $contactos[$l]["LastName"]=utf8_encode($c->getCaPapellido(). " ".$c->getCaSapellido());
                        if ($c->getCaDireccion()) {
                            $contactos[$l]["Address"]=utf8_encode($c->getCaDireccion());
                        } else {
                            $contactos[$l]["Address"]=utf8_encode($s->getCaDireccion());
                        }
                        $contactos[$l]["Tel1"]=utf8_encode(substr($c->getCaTelefonos(),0,20));
                        $contactos[$l]["Active"]=($c->getCaActivo())?1:0;   /* Sep 19/2017 Se implementa un nuevo campo Active */
                        $contactos[$l++]["E_Mail"]=utf8_encode($c->getCaEmail());
                        //$contactos[$k]["IDContacto"]=$c->getCaIdcontacto(); Se eliminó en nuevo documento
                    //}
                }
            }
        }
        return $contactos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function getJsonBancos($ids)
    {
        $bnk = array();
        $bancos=$ids->getIdsBanco();
        foreach($bancos as $k => $b)
        {
            $bnk[$k]["BankCode"] = utf8_encode($b->getCaCodigoEntidad());
            $bnk[$k]["Account"] = utf8_encode($b->getCaNumeroCuenta());
            $bnk[$k]["TipoCta"] = utf8_encode($b->getCaTipoCuenta()); // A: Ahorros C: Corriente
            //$dir[$k]["Telefono"]=$s->getCaTelefonos(); // Se eliminó en nuevo documento;            
        }
        return $bnk;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonConceptos() {
        
         $reg = Doctrine::getTable("InoMaestraConceptos")
                          ->createQuery("u")
                          ->select("*")
                          ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                          ->fetchOne();

        $datos["user"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= ($this->getCaIndice2())?$this->getCaIndice2():"1";
        $datos["System"]="2";

        $datos["ItemCode"]=utf8_encode($reg->getCaIdconcepto());
        $datos["ItemName"]=utf8_encode($reg->getCaConceptoEsp());
        $datos["FrgnName"]=utf8_encode($reg->getCaConceptoEng());
        $datos["Estado"]="N";
        $datos["SellItem"]=($reg->getCaVenta()=="1" || $reg->getCaVenta()=="true" || $reg->getCaVenta()==true)?"1":"0";      //Venta
        $datos["PrchseItem"]=($reg->getCaCompra()=="1" || $reg->getCaCompra()=="true" || $reg->getCaCompra()==true)?"1":"0"; //Compra
        
         return  $datos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonReferenciasUtilidad(){
    
        $master = Doctrine::getTable("InoMaster")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
        
        $ccosto = Doctrine::getTable("InoCentroCosto")->findByDql("ca_impoexpo = ? AND ca_transporte = ? AND ca_idccosto > 99", array($master->getCaImpoexpo(), $master->getCaTransporte()))->getFirst();
        $linea = json_decode($ccosto->getCaCcostosap(), 1);

        $clientes = array();
        
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $master->getUsuCreado()->getSucursal()->getEmpresa()->getCaIdsap(); // Se obtiene de la empresa a la que pertenece el usuario que la creó
        $datos["System"]="2";
        
        $datos["CodReferencia"] = $master->getCaReferencia();
        $datos["Fecha"] = date('Y/m/d');
        $datos["Comentarios"] = utf8_encode($master->getCaObservaciones());
        $datos["Linea"] = $linea["idlinea"];
                
        //Lineas        
        $lineas = Doctrine::getTable("InoHouse")
                ->createQuery("h")
                ->select("*")
                ->where("ca_idmaster = ?", $master->getCaIdmaster())
                ->execute();
        
        $distribucionUti = $this->calcularDistribucionxUtilidad($master, $lineas);
       
        foreach($lineas as $linea){            
            if(!in_array($linea->getCaIdcliente(), $clientes)){            
                $datos["Lineas"][] = array("CardCode"=>"C".$linea->getCliente()->getCaIdalterno(), "PorcUtilidad"=>$distribucionUti[$linea->getCaIdcliente()], "Sucursal"=>$linea->getVendedor()->getSucursal()->getCaIdsap());
                $clientes[] = $linea->getCaIdcliente();
            }
        }
        return  $datos;
    }
    
    /*OK REVISADO JUL/31/2017*/
    public function jsonReferenciasCostos(){
    
        $master = Doctrine::getTable("InoMaster")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
        
        $clientes = array();
        
        $datos["User"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $master->getUsuCreado()->getSucursal()->getEmpresa()->getCaIdsap(); // Se obtiene de la empresa a la que pertenece el usuario que la creó
        $datos["System"]="2";
        
        $datos["CodReferencia"] = $master->getCaReferencia();
        $datos["Fecha"] = date('Y/m/d');
        $datos["Comentarios"] = utf8_encode($master->getCaObservaciones());
                
        //Lineas        
        $lineas = Doctrine::getTable("InoHouse")
                ->createQuery("h")
                ->select("*")
                ->where("ca_idmaster = ?", $master->getCaIdmaster())
                ->execute();
        
        $costoxCliente = $this->calcularDistribucionxCostos($master, $lineas);
        $tot_costos = array_sum($costoxCliente);
       
        foreach($lineas as $linea){            
            if(!in_array($linea->getCaIdcliente(), $clientes)){            
                $datos["Lineas"][] = array("CardCode"=>"C".$linea->getCliente()->getCaIdalterno(), "PorcParticipa"=>round($costoxCliente[$linea->getCaIdcliente()]/$tot_costos*100,0));
                $clientes[] = $linea->getCaIdcliente();
            }
        }
        
         return  $datos;
    }
    
    public function calcularDistribucionxUtilidad($master, $lineas){
        
        $clientes = array();
        $dd = array();
        
        $ingresos = Doctrine::getTable("InoViIngreso")
                ->createQuery("i")
                ->select("*")                
                ->where("ca_idmaster = ?", $master->getCaIdmaster())
                ->execute();        
        
        $deducciones = Doctrine::getTable("InoViDeduccion")
                ->createQuery("d")
                ->select("*")
                ->where("ca_idmaster = ?", $master->getCaIdmaster())
                ->execute();
        
        foreach($ingresos as $ingreso){
            $ig[$ingreso->getCaIdcliente()]+=$ingreso->getCaValor();
        }        
        $tot_ingreso = array_sum($ig);
        
        foreach($deducciones as $d){
            $dd[$d->getCaIdcliente()]+=$d->getCaValor();
        }
        $tot_deducciones = array_sum($dd);
        
        foreach($lineas as $linea){
            if(!in_array($linea->getCaIdcliente(), $clientes))
                $clientes[] = $linea->getCaIdcliente();
            }
        
        $costoxCliente = $this->calcularDistribucionxCostos($master, $lineas);
        
        foreach($clientes as $cliente){            
            $ctxCliente[$cliente]+= $costoxCliente[$cliente];
            $ut[$cliente] = $ig[$cliente]-($ctxCliente[$cliente]+$dd[$cliente]);        
        }
        $tot_utilidad = array_sum($ut);
        
        foreach($clientes as $cliente){            
            $distribucionUti[$cliente] = round($ut[$cliente]/$tot_utilidad*100,0);
        }
        
        // Ajuste a la Utilidad para que sume 100
        $tot_utilidad2 = array_sum($distribucionUti);        
        $diff = $tot_utilidad2-100;
        
        if($diff!==0){
            $max = max($distribucionUti);

            foreach($distribucionUti as $key=>$val){
                if($distribucionUti[$key]==$max)
                    $id = $key;
            }

            $distribucionUti[$id] = $distribucionUti[$id] - $diff;
            $total_utilidad_ajustada = array_sum($distribucionUti);
        }
        
        return $distribucionUti;        
    }
    
    public function calcularDistribucionxCostos($master, $lineas){
        
        $clientes = array();
        
        $costos = Doctrine::getTable("InoCosto")
                ->createQuery("c")
                ->select("*")
                ->leftJoin("c.InoHouse h")
                ->where("ca_idmaster = ?", $master->getCaIdmaster())
                ->execute();
            
        
        foreach($costos as $costo){
            $idcliente = $costo->getCaIdhouse()?$costo->getInoHouse()->getCaIdcliente():null;
            if($idcliente){
                $ct[$idcliente]+=$costo->getCaNeto();
                }else{
                $ct["General"]+=$costo->getCaNeto();
                }
            }
        $tot_costo = array_sum($ct);
        
        foreach($lineas as $linea){            
            $peso[$linea->getCaIdcliente()]+= $master->getCaTransporte()=="Marítimo"?$linea->getCaVolumen():$linea->getCaPeso();;
            if(!in_array($linea->getCaIdcliente(), $clientes))
                $clientes[] = $linea->getCaIdcliente();
        }
        $tot_peso = array_sum($peso);
        
        foreach($lineas as $linea){            
            $distribucion[$linea->getCaIdcliente()] = round($peso[$linea->getCaIdcliente()]/$tot_peso*100,2);
        }
        
        foreach($clientes as $cliente){            
            $ctxCliente[$cliente]+= ($ct[$cliente]+$ct["General"])*$distribucion[$cliente]/100;
        }
        
        return $ctxCliente;        
    }
    
     /*OK REVISADO JUL/31/2017*/
    public function jsonNotasCredito(){
    
        $reg = Doctrine::getTable("InoComprobante")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
    
        $tipoComprobante = Doctrine::getTable("InoTipoComprobante")->find($reg->getCaIdtipo());
        $tipoDoc = $tipoComprobante->getCaPrefijoSap();
        $ccostos = Doctrine::getTable("InoCentroCosto")->find($reg->getCaIdccosto());
        
        
        $datos["user"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $tipoComprobante->getSucursal()->getEmpresa()->getCaIdsap(); // Pendiente definir en tabla de empresas los Id de SAP
        $datos["System"]="2";
        
        $datos["TipoDoc"]=$tipoDoc;
        $datos["CodigoDoc"] = utf8_encode($tipoComprobante->getCaTipo());
        $datos["Series"] = $tipoComprobante->getCaComprobante();
        $datos["NumeroInterno"] = $reg->getCaIdcomprobante();
        //$datos["CardCode"] = $reg->getIds()->getCaIdalterno();//$tipoDoc=="RV"?"C".$reg->getIds()->getCaIdalterno():"P".$reg->getIds()->getCaIdalterno();
        $datos["CardCode"] = $reg->getIds()->getCaIdalterno().(($reg->getIds()->getCaDv()!="")?"-".$reg->getIds()->getCaDv():"");
        $datos["DocDate"] = date("Y/m/d");
        //$datos["DocDueDate"] = date("Y/m/d");
        $datos["TaxDate"] = date("Y/m/d");
        if($reg->getCaPlazo()<1)
            $plazo=0;
        else
            $plazo=$reg->getCaPlazo();
        
        
        
        $datos["DocDueDate"] = date('Y/m/d', strtotime($reg->getCaFchcomprobante(). ' + '.($plazo).' days')); // Pendiente asociar el plazo con el asignado al proveedor
        //$datos["DocDueDate"] = date('Y/m/d', strtotime($reg->getCaFchcomprobante(). ' + '.($reg->getCaPlazo()+1).' days')); // Pendiente asociar el plazo con el asignado al proveedor
        $datos["NumAtCard"] = "";        
        $datos["Comments"] = ($reg->getCaObservaciones()!="")?$reg->getCaObservaciones():"";
        //$datos["SlpCode"] = ""; // Código empleado de ventas        
        $datos["SlpCode"] = $reg->getInoHouse()->getVendedor()->getCaDocidentidad();//"-1"; // Código empleado de ventas        
        $datos["DocCur"] = $reg->getCaIdmoneda();
        $datos["DocRate"] = $reg->getCaTcambio();
        $datos["PrjCode"] = $reg->getInoHouse()->getInoMaster()->getCaReferencia();        
        $lineas=$reg->getInoDetalle();
        
        $ccosto_sap = json_decode($ccostos->getCaCcostosap());
        $lin=array();
        
        foreach($lineas as $linea){
            $lin[]=array(
                "ItemCode"=> utf8_encode($linea->getCaIdconcepto()),
                "Quantity" => 1,
                "UnitPrice" => $linea->getCaDb(),
                "OcrCode" => $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap(),//$reg->getInoTipoComprobante()->getCaIdsucursal(), //Código de la sucursal
                "OcrCode2" => $ccosto_sap->idarea, // Código del área
                "OcrCode3" => str_pad($reg->getUsuCreado()->getDepartamento()->getCaIdsap(),2,"0",STR_PAD_LEFT), // Código del departamento
                "OcrCode4" => $ccosto_sap->idlinea, // Código de la línea
                "OcrCode5" => "",
                "PrjCode"=>$tipoDoc=="RV"?$reg->getInoHouse()->getInoMaster()->getCaReferencia():$linea->getInoMaster()->getCaReferencia()                
                    );
        }
           
        $datos["DocumentLines"]=$lin;    
         return  $datos;
    }
    
    public static function enviarWs($idtransaccion='',$user='') {
        
        ProjectConfiguration::registerZend();        
        $config = sfConfig::get('app_soap_sap');
        
        $client = new Zend_Soap_Client($config["wsdl_uri"], array('encoding' => 'ISO-8859-1', 'soap_version' => SOAP_1_2));
        
        $q = Doctrine::getTable("IntTransaccionesOut")
                            ->createQuery("tr")
                            ->select("*")          
                            ->where("tr.ca_estado=? and tr.ca_datos is not null", array("G"))
                            ->limit(1);

        if($idtransaccion && $idtransaccion>0)
            $q->whereIn("tr.ca_idtransaccion", json_decode($idtransaccion));
        
        $transacciones=$q->execute();    
        
        $result=array();
        if(count($transacciones)>0){            
            foreach($transacciones as $tr)
            {
            $respuesta="";
            try{
                //echo "858:".$tr->getIntTipos()->getCaMetodo()."<br/>";
                eval("\$respuesta = \$client->".$tr->getIntTipos()->getCaMetodo()." ( array('jsonDoc' => \$tr->getCaDatos()  ));");
                //echo "860:".$respuesta."<br/>";
                $estado="P";
                $obj=null;
                foreach($respuesta as $r)
                {
                    $obj=utf8_decode($r);
                    $respuestaString=json_encode($obj);
                }
                //echo $obj;

            }catch(Exception $e)
            {
                $respuesta=$e->getMessage();
                $estado="E";
            }            
            $respuesta1=json_decode($obj);
            $respuestaString=json_encode($respuesta1);
            if($respuesta1->Status=="0" && $tr->getCaIndice1()!="0")
            {
                switch($tr->getIntTipos()->getCaIdtipo())
                {
                    case 13:
                    case 7:
                    {
                        $resComp=self::getDocuments(null,array($tr),$respuesta1->DocEntry,$client);
                        
                        $resComp=$resComp[0];
                        $comp=null;                        
                        $q = Doctrine::getTable("InoComprobante")
                                ->createQuery("i")
                                ->select("*")
                                ->where("ca_idcomprobante=? ",array($tr->getCaIndice1() ));
                        $comps=$q->execute();                        
                        if(count($comps)<1)
                            continue;
                        $comp=$comps[0];

                        $respuesta1->Consecutivo=$resComp->CodigoDoc;
                        

                        $neto=floatval($resComp->VlrNeto);
                        $imp=floatval($resComp->VlrImpuestos);
                        $trm=floatval($resComp->DocRate);
                        $autoret=floatval($resComp->AutoRetencion);

                        $total=0;
                        $total2=(($neto-$imp)*$trm);

                        foreach($resComp->Lineas as $l)
                        {
                            $v=floatval($l->VlrArticulo);
                            $total+= $v;
                            //$inodetalle = Doctrine::getTable("InoDetalle")->findByDql( "ca_idcomprobante=? and ca_idconcepto=?",array($l->PrjCode, $l->ItemCode ));
                            
                            $inodetalle = Doctrine::getTable("InoDetalle")
                                ->createQuery("i")
                                ->select("*")
                                ->where("ca_idcomprobante=? and ca_idconcepto=?",array($comp->getCaIdcomprobante(), $l->ItemCode ))
                                ->fetchOne();
                            $inodetalle->setCaIdcuenta($l->AcctCode);
                            $inodetalle->save();
                            //$inodetalle = Doctrine::getTable("InoDetalle")->findBy ($reg->getCaIdtipo());
                        }

                        
                        //echo "<pre>";print_r($datosjson);echo "</pre>";
                        $datosjson=json_decode($comp->getCaDatos());
                        $datosjson->iva=$resComp->VlrImpuestos;
                        $datosjson->rteiva=$resComp->ReteIva;
                        $datosjson->rteica=$resComp->ReteIca;
                        $datosjson->rtefuente=$resComp->ReteFuente;
                        $datosjson->autoretencion=$resComp->AutoRetencion;
                        $datosjson->idtransaccion=$tr->getCaIdtransaccion();
                        
                        $comp->setCaDocentry($respuesta1->DocEntry);
                        $comp->setCaConsecutivo(intval($resComp->CodigoDoc));
                        $comp->setCaFchcomprobante($resComp->DocDate);
                        $comp->setCaValor($total);
                        $comp->setCaValor2($neto);
                        $comp->setCaDatos(json_encode($datosjson));
                        $comp->setCaEstado("5");    
                        $comp->setCaUsugenero($user);
                        $comp->setCaFchgenero(date("Y-m-d H:i:s"));
                        //$comp->stopBlaming();
                        //$comp->save();
                        $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                        $sql="update ino.tb_comprobantes set ca_estado=5, ca_docentry='".$respuesta1->DocEntry."',
                            ca_consecutivo='".$resComp->CodigoDoc."',ca_fchcomprobante='".$resComp->DocDate."' ,
                            ca_valor='".$total."',ca_valor2='".$neto."' ,
                            ca_datos='".json_encode($datosjson)."',ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                            where ca_idcomprobante='".$tr->getCaIndice1()."'";
                        $st = $con1->execute($sql);
                    }
                    break;
                    case 8:                    
                    {
                        
                        $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                        $sql="UPDATE ino.tb_comprobantes SET ca_estado=5, ca_docentry='".$respuesta1->DocEntry."',ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                            where ca_idcomprobante='".$tr->getCaIndice1()."'";
                        $st = $con1->execute($sql);
                        //echo "957:".$sql."<br/>";
                        
                        // Los costos solo aplican para Coltrans y ColOtm
                        if($respuesta1->Company === 1 || $respuesta1->Company === 2){
                        
                            $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                            $sql1="SELECT d.ca_idmaster, d.ca_idconcepto, c.ca_consecutivo, c.ca_fchcomprobante, c.ca_id, c.ca_idmoneda, c.ca_tcambio, d.ca_cr, c.ca_idcomprobante, d.ca_idhouse
                                FROM ino.tb_detalles d
                                        INNER JOIN ino.tb_comprobantes c ON d.ca_idcomprobante = c.ca_idcomprobante
                                WHERE d.ca_idcomprobante =".$tr->getCaIndice1();
                            $st = $con1->execute($sql1);
                            $detalles = $st->fetchAll();

                            foreach($detalles as $detalle){
                                $idhouse = $detalle["ca_idhouse"]?$detalle["ca_idhouse"]:'null';
                                $con2 = Doctrine_Manager::getInstance()->getConnection('master');
                                $sql2="INSERT INTO ino.tb_costos (ca_idmaster, ca_idcosto, ca_factura, ca_fchfactura, ca_idproveedor, ca_idmoneda, ca_tcambio, ca_tcambio_usd, ca_neto, ca_venta, ca_idcomprobante, ca_idhouse, ca_fchcreado, ca_usucreado) "
                                        . "VALUES (".$detalle["ca_idmaster"].",".$detalle["ca_idconcepto"].",'".$detalle["ca_consecutivo"]."','".$detalle["ca_fchcomprobante"]."',".$detalle["ca_id"].",'".$detalle["ca_idmoneda"]."',".$detalle["ca_tcambio"].",1,".$detalle["ca_cr"].",".round($detalle["ca_cr"]*$detalle["ca_tcambio"], 2, PHP_ROUND_HALF_UP).",".$detalle["ca_idcomprobante"].",".$idhouse.",'".date("Y-m-d H:i:s")."','sap')";
                                //echo $sql2;
                                $st = $con2->execute($sql2);
                            }
                        }
                    }
                    break;
                    case 10:                    
                    {
                        // Elimina los costos si aplica
                        // Los costos solo aplican para Coltrans y ColOtm
                        if($respuesta1->Company === 1 || $respuesta1->Company === 2){
                        
                            $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                            $sql1=" SELECT c.ca_idcosto
                                    FROM ino.tb_costos c
                                    WHERE c.ca_idcomprobante =".$tr->getCaIndice1();
                            $st = $con1->execute($sql1);
                            $costos = $st->fetchAll();
                            
                            if(count($costos)>0){
                                foreach($costos as $costo){
                                    //$idhouse = $detalle["ca_idhouse"]?$detalle["ca_idhouse"]:'null';
                                    $con2 = Doctrine_Manager::getInstance()->getConnection('master');
                                    $sql2="DELETE FROM ino.tb_costos WHERE ca_idcosto = ".$costo["ca_idcosto"];
                                    //echo $sql2;
                                    $st = $con2->execute($sql2);
                                }
                            }
                        }
                    }
                    break;
                    case 20:                    
                    {
                        $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                        $sql="UPDATE ino.tb_comprobantes SET ca_estado=5, ca_docentry='".$respuesta1->DocEntry."',ca_fchgenero='".date("Y-m-d H:i:s")."' , ca_usugenero='{$user}'
                            where ca_idcomprobante='".$tr->getCaIndice1()."'";
                        $st = $con1->execute($sql);
                        
                        // Los costos solo aplican para Coltrans y ColOtm
                        if($respuesta1->Company === 1 || $respuesta1->Company === 2){
                        
                            $con1 = Doctrine_Manager::getInstance()->getConnection('master');
                            $sql1="SELECT d.ca_idmaster, d.ca_idconcepto, c.ca_consecutivo, c.ca_fchcomprobante, c.ca_id, c.ca_idmoneda, c.ca_tcambio, d.ca_cr, c.ca_idcomprobante, d.ca_idhouse
                                FROM ino.tb_detalles d
                                        INNER JOIN ino.tb_comprobantes c ON d.ca_idcomprobante = c.ca_idcomprobante
                                WHERE d.ca_idcomprobante =".$tr->getCaIndice1();
                            $st = $con1->execute($sql1);
                            $detalles = $st->fetchAll();

                            foreach($detalles as $detalle){
                                $idhouse = $detalle["ca_idhouse"]?$detalle["ca_idhouse"]:'null';
                                $neto = $detalle["ca_cr"]*-1;
                                $venta = round($detalle["ca_cr"]*$detalle["ca_tcambio"]*-1, 2, PHP_ROUND_HALF_UP);
                                $con2 = Doctrine_Manager::getInstance()->getConnection('master');
                                $sql2="INSERT INTO ino.tb_costos (ca_idmaster, ca_idcosto, ca_factura, ca_fchfactura, ca_idproveedor, ca_idmoneda, ca_tcambio, ca_tcambio_usd, ca_neto, ca_venta, ca_idcomprobante, ca_idhouse, ca_fchcreado, ca_usucreado) "
                                        . "VALUES (".$detalle["ca_idmaster"].",".$detalle["ca_idconcepto"].",'".$detalle["ca_consecutivo"]."','".$detalle["ca_fchcomprobante"]."',".$detalle["ca_id"].",'".$detalle["ca_idmoneda"]."',".$detalle["ca_tcambio"].",1,".$neto.",".$venta.",".$detalle["ca_idcomprobante"].",".$idhouse.",'".date("Y-m-d H:i:s")."','sap')";
                                //echo $sql2;
                                $st = $con2->execute($sql2);
                            }
                        }        
                    }
                }
            }
            else
            {
                $estado="E";
            }
            $tr->setCaEstado($estado);
            $tr->setCaFchenvio(date("Y-m-d H:i:s"));
            $tr->setCaRespuesta(stripslashes($respuestaString));
            $tr->save();
            $result[]=$respuesta1;
        }
        }else{
            $result[] = json_decode('{"Status":1, "Message":"No existen transacciones para enviar. Por favor vefique el Estado de la transaccion es: Generado"}');
        }
        return $result;
    }
    
    public static function getDocuments($idtransaccion='',$transacciones=null,$docEntry='',$client=null)
    {
        if($client==null)
        {
            ProjectConfiguration::registerZend();        
            $config = sfConfig::get('app_soap_sap');        
            $client = new Zend_Soap_Client($config["wsdl_uri"], array('encoding' => 'ISO-8859-1', 'soap_version' => SOAP_1_2));
        }

        if($transacciones==null)
        {
            $q = Doctrine::getTable("IntTransaccionesOut")
                ->createQuery("tr")
                ->select("*")          
                ->addWhere("tr.ca_idtransaccion =? ", $idtransaccion );
            $transacciones=$q->execute();
        }
        
        foreach($transacciones as $tr)
        {
            $comprobante = Doctrine::getTable("InoComprobante")->find($tr->getCaIndice1());
            $tipoComprobante = $comprobante->getInoTipoComprobante();
            $datos["User"]= self::userSap;
            $datos["Password"]=self::passSap;
            $datos["Company"]= $tipoComprobante->getSucursal()->getEmpresa()->getCaIdsap(); 
            $datos["System"]="2";
            $datos["NumeroReferencia"]=$comprobante->getInoHouse()->getInoMaster()->getCaReferencia();
            $datos["TipoDoc"]=$tipoComprobante->getCaPrefijoSap();
            $datos["DocEntry"]=($docEntry!='')?$docEntry:$comprobante->getCaDocentry();

            $resComp=$client->getDocuments(array('jsonDoc' =>json_encode($datos)));            
            $respuesta1=json_decode($resComp->getDocumentsResult);
        }
        return $respuesta1;
    }


    public function jsonAnulacion()
    {
        $reg = Doctrine::getTable("InoComprobante")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();        
        
        $tipoComprobante = Doctrine::getTable("InoTipoComprobante")->find($reg->getCaIdtipo());       
        
        $datos["User"]= self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $tipoComprobante->getSucursal()->getEmpresa()->getCaIdsap(); 
        $datos["System"]="2";       
        $datos["Series"] = $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap();
        $datos["CodigoDoc"] =$tipoComprobante->getCaPrefijoSap();
        $datos["DocEntry"] = $reg->getCaDocentry();
        return  $datos;
    }
    
    public static function reporteErrores() {
        $sql = "select tr.ca_idtransaccion, tr.ca_idtipo, tr.ca_indice1, tp.ca_nombre, tp.ca_indice1 as ca_campo, tr.ca_datos, tr.ca_fchenvio, tr.ca_respuesta, tr.ca_estado "
                . "from integracion.tb_transaccionesout tr "
                . "inner join integracion.tb_tipos tp on tp.ca_idtipo = tr.ca_idtipo "
                . "where ca_estado = 'E'";

        $con = Doctrine_Manager::getInstance()->connection();
        $st = $con->execute($sql);

        $transacciones = $st->fetchAll();

        $html = "<p>" . chr(13)
                . "Alerta en Integración: " . chr(13)
                . "Existente Registros en módulo de integración Colsys - SAP BO, que han retornado error. A continuación se relacionan los eventos:" . chr(13)
                . "<br />" . chr(13)
                . "<table>" . chr(13);
        foreach ($transacciones as $tr) {
            $html .= "<tr>" . chr(13);
            $html .= "  <th>Indice 1<th>" . chr(13);
            $html .= "  <th>Detalle<th>" . chr(13);
            $html .= "  <th>Fecha Envío<th>" . chr(13);
            $html .= "  <th>Datos<th>" . chr(13);
            $html .= "  <th>Respuesta<th>" . chr(13);
            $html .= "</tr>" . chr(13);
            $html .= "<tr>" . chr(13);
            $html .= " <td>" . $tr["ca_indice1"] . "</td>" . chr(13);
            if (in_array($tr["ca_nombre"], array("ReferenciasCreacion", "ReferenciasUtilidad", "ReferenciasCostos", "ReferenciasActualizacion"))) {
                $html .= "<td><strong>Referencia:<strong><br />" . $tr["ca_indice1"] . "</td>" . chr(13);
            } else if (in_array($tr["ca_nombre"], array("Clientes", "Proveedores", "Agentes"))) {
                $sql = "select ca_id, ca_nombre, ca_idalterno from ids.tb_ids where ca_id = " . $tr["ca_indice1"];
                $st = $con->execute($sql);
                $cliente = $st->fetchAll();
                if ($cliente) {
                    $html .= "<td><strong>" . $tr["ca_nombre"] . ":<strong><br />" . $cliente[0]["ca_nombre"] . " Nit :" . $cliente[0]["ca_idalterno"] . "</td>" . chr(13);
                } else {
                    $html .= "<td><strong>Indice:<strong><br />" . $tr["ca_indice1"] . "</td>" . chr(13);
                }
            } else if ($tr["ca_nombre"] == "Empleados") {                
                $sql = "select ca_login, ca_nombre, ca_docidentidad from control.tb_usuarios where ca_login = '" . $tr["ca_indice1"] . "'";
                $st = $con->execute($sql);
                $usuario = $st->fetchAll();
                if ($usuario) {
                    $html .= "<td><strong>Empleado :<strong><br />" . $usuario[0]["ca_nombre"] . " Identificación :" . $usuario[0]["ca_docidentidad"] . "</td>" . chr(13);
                } else {
                    $html .= "<td><strong>Indice:<strong><br />" . $tr["ca_indice1"] . "</td>" . chr(13);
                }
            } else if ($tr["ca_nombre"] == "Conceptos") {
                $sql = "select ca_idconcepto, ca_concepto from ino.tb_conceptos where ca_idconcepto = '" . $tr["ca_indice1"] . "'";
                $st = $con->execute($sql);
                $concepto = $st->fetchAll();
                if ($concepto) {
                    $html .= "<td><strong>Concepto:<strong><br />" . $concepto[0]["ca_concepto"] . "</td>" . chr(13);
                } else {
                    $html .= "<td><strong>Indice:<strong><br />" . $tr["ca_indice1"] . "</td>" . chr(13);
                }
            } else if (in_array($tr["ca_nombre"], array("FacturasV", "FacturasC", "Anulacion", "NotasCredito"))) {
                // $comprobante = Doctrine::getTable("InoComprobante")->findOneBy("ca_idcomprobante", $tr["ca_indice1"]);
                $sql = "select ca_idcomprobante, ca_consecutivo from ino.tb_comprobantes where ca_idcomprobante = '" . $tr["ca_indice1"] . "'";
                $st = $con->execute($sql);
                $comprobante = $st->fetchAll();
                if ($comprobante) {
                    $html .= "<td><strong>Comprobante:<strong><br />" . $comprobante[0]["ca_consecutivo"] . "</td>" . chr(13);
                } else {
                    $html .= "<td><strong>Indice:<strong><br />" . $tr["ca_indice1"] . "</td>" . chr(13);
                }
            }
            $html .= " <td>" . $tr["ca_fchenvio"] . "</td>" . chr(13);
            $html .= " <td>" . $tr["ca_datos"] . "</td>" . chr(13);
            $html .= " <td>" . $tr["ca_respuesta"] . "</td>" . chr(13);
            $html .= "</tr>" . chr(13);
        }
        $html .= "</table>";

        $email = new Email();
        $email->setCaUsuenvio("Administrador");
        $email->setCaTipo("Error Integracion");
        $email->setCaFrom("nagios@correo.colsys.coltrans.com.co");
        $email->setCaFromname("Colsys Notificaciones");
        $email->setCaSubject(date("Y-m-d") . ": Registros Integracion con Error");
        $email->addTo("admin@coltrans.com.co");

        $email->setCaBodyhtml($html);
        $email->save();
        return $html;
    }    
    
     /*OK REVISADO JUL/31/2017*/
    public function jsonNotasCreditoProv(){
    
        $reg = Doctrine::getTable("InoComprobante")
                ->createQuery("c")
                ->select("*")
                ->where($this->getIntTipos()->getCaIndice1()."= ?", $this->getCaIndice1())
                ->fetchOne();
    
        $tipoComprobante = Doctrine::getTable("InoTipoComprobante")->find($reg->getCaIdtipo());
        $tipoDoc = $tipoComprobante->getCaPrefijoSap();
        $ccostos = Doctrine::getTable("InoCentroCosto")->find($reg->getCaIdccosto());
        
        $datos["user"]=self::userSap;
        $datos["Password"]=self::passSap;
        $datos["Company"]= $tipoComprobante->getSucursal()->getEmpresa()->getCaIdsap(); // Pendiente definir en tabla de empresas los Id de SAP
        $datos["System"]="2";
        
        $datos["TipoDoc"]=$tipoDoc;
        $datos["CodigoDoc"] = utf8_encode($tipoComprobante->getCaTipo());
        $datos["Series"] = $tipoComprobante->getCaComprobante();
        $datos["NumeroInterno"] = $reg->getCaIdcomprobante();
        //$datos["CardCode"] = $reg->getIds()->getCaIdalterno();//$tipoDoc=="RV"?"C".$reg->getIds()->getCaIdalterno():"P".$reg->getIds()->getCaIdalterno();
        $datos["CardCode"] = $reg->getIds()->getCaIdalterno().(($reg->getIds()->getCaDv()!="")?"-".$reg->getIds()->getCaDv():"");
        $datos["DocDate"] = date("Y/m/d");
        //$datos["DocDueDate"] = date("Y/m/d");
        $datos["TaxDate"] = date("Y/m/d");
        if($reg->getCaPlazo()<1)
            $plazo=0;
        $datos["DocDueDate"] = date('Y/m/d', strtotime($reg->getCaFchcomprobante(). ' + '.($plazo).' days')); // Pendiente asociar el plazo con el asignado al proveedor
        //$datos["DocDueDate"] = date('Y/m/d', strtotime($reg->getCaFchcomprobante(). ' + '.($reg->getCaPlazo()+1).' days')); // Pendiente asociar el plazo con el asignado al proveedor
        $datos["NumAtCard"] = $reg->getCaConsecutivo();        
        $datos["Comments"] = ($reg->getCaObservaciones()!="")?$reg->getCaObservaciones():"";
        //$datos["SlpCode"] = ""; // Código empleado de ventas        
        $datos["SlpCode"] = $reg->getInoHouse()->getVendedor()->getCaDocidentidad();//"-1"; // Código empleado de ventas        
        $datos["DocCur"] = $reg->getCaIdmoneda();
        $datos["DocRate"] = $reg->getCaTcambio();
        $datos["PrjCode"] = $reg->getInoHouse()->getInoMaster()->getCaReferencia();
        
        $lineas=$reg->getInoDetalle();
        $ccosto_sap = json_decode($ccostos->getCaCcostosap());
        $lin=array();

        foreach($lineas as $linea){
            $lin[]=array(
                "ItemCode"=> utf8_encode($linea->getCaIdconcepto()),
                "Quantity" => $linea->getCaCr()<0?-1:1,
                "UnitPrice" => $linea->getCaCr()<0?$linea->getCaCr()*-1:$linea->getCaCr(),
                "OcrCode" => $reg->getInoTipoComprobante()->getSucursal()->getCaIdsap(),//$reg->getInoTipoComprobante()->getCaIdsucursal(), //Código de la sucursal
                "OcrCode2" => $ccosto_sap->idarea, // Código del área
                "OcrCode3" => str_pad($reg->getUsuCreado()->getDepartamento()->getCaIdsap(),2,"0",STR_PAD_LEFT), // Código del departamento
                "OcrCode4" => $ccosto_sap->idlinea, // Código de la línea
                "OcrCode5" => "",
                "PrjCode"=>$tipoDoc=="V"?$reg->getInoHouse()->getInoMaster()->getCaReferencia():$linea->getInoMaster()->getCaReferencia()
                //"PrjCode" => $linea->getInoHouse()->getInoMaster()->getCaReferencia()
                    );
        }

        $datos["DocumentLines"]=$lin;    
         return  $datos;
    }

}
