<?php

/**
 * Idg
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Idg extends BaseIdg
{
    /*
     * Retorna el periodo dado un string de mes (meses)
     * @author: Andrea Ramírez
     */

    public function getIdgPeriodo($mes) {
        
        if(count($mes)>0){
            $param = array(
                "01" => "Ene",
                "02" => "Feb","03" => "Mar",
                "04" => "Abr",
                "05" => "May",
                "06" => "Jun",
                "07" => "Jul",
                "08" => "Ago",
                "09" => "Sep",
                "10" => "Oct",
                "11" => "Nov",
                "12" => "Dic"
            );

            $mesArray = explode(",", $mes);

            foreach($mesArray as $key => $m){
                $periodo[] = $param[$m];
}

            return implode(",", $periodo);
        }
        else{
            return "";
        }
        
    }
            
    public function getTitle(array $datos ) {
        
        $title = utf8_encode($this->getIdgProcesos()->getCaNombre()).'<br/>'.utf8_encode($this->getCaNombre());
        $title = $datos["sucursal"]?$title."<br/>".$datos["sucursal"]:$title;
        $title = $datos["origen"]?$title."<br/>".$datos["origen"]:$title;
        $title = $datos["cliente"]?$title."<br/>".$datos["cliente"]:$title;
        $title = $datos["usuario"]?$title."<br/>".$datos["usuario"]:$title;
        
        return $title;
        
    }
    
    public function getSubTitle($ano, $mes) {
        
        return $mes." / ".$ano;
        
    }
    
    public function getDifference(array $options ){
        
        $idg = IdgTable::getNuevoIndicador($options);
                
        if(is_object($idg)){
//            echo "Lim1".$idg->getCaLim1()."<br/>";
//            echo $options["fchini"]."<br/>";
//            echo $options["fchend"]."<br/>";
//            exit();
            $num_dias = intval($idg->getCaLim1());
            $festivos = TimeUtils::getFestivos();
            
            if($options["tipodiff"] == "H:i:s"){
                
                list($ano, $mes, $dia, $hor, $min, $seg) = sscanf($options["fchini"], "%d-%d-%d %d:%d:%d");
                $inicio = mktime($hor, $min, $seg, $mes, $dia, $ano);
                list($ano, $mes, $dia, $hor, $min, $seg) = sscanf($options["fchend"], "%d-%d-%d %d:%d:%d");
                $final = mktime($hor, $min, $seg, $mes, $dia, $ano);
                
                $sucursal = Doctrine::getTable("Sucursal")->find($options["idsucursal"]);
                
                $dif_mem = TimeUtils::calcDiffParams($festivos, $inicio, $final, $sucursal->getCaEntrada(), $sucursal->getCaSalida());                
            }else{ 
                $dif_mem = TimeUtils::workDiff($festivos, $options["fchini"], $options["fchend"]);
            }
                
            $cumple = $this->getCumple($options["tipodiff"], $dif_mem, $num_dias);                
            
            return array("val"=>$dif_mem, "estado"=>$cumple);
        }
        return array("val"=>null, "estado"=>-1);
    }
    
    public function getCumple($tipodiff, $dif_mem, $num_dias){
        
        switch($tipodiff){
            case "H:i:s":
                list($hor, $min, $seg) = sscanf($dif_mem, "%d:%d:%d");
                $dif_sec = ($hor * 3600) + ($min * 60) + $seg;                
                $dif_mem = $dif_sec;
                $num_dias = $num_dias*60*60;
                break;            
        }
        
        if ($dif_mem > $num_dias) {                    
            return 0;
        }else{                    
            return 1;
        }
    }
    
    public function calcularIndicador($options){
        
        $user = sfContext::getInstance()->getUser();
        $datos = json_decode(utf8_encode($this->getCaDatos()),1);
        
        $options["tipo"] = $datos["tipo"];
        $options["tipodiff"] = $datos["tipodiff"];
        $options["sigla"] = $this->getCaSigla();
        $options["impoexpo"] = $this->getCaImpoexpo();
        $options["transporte"] = $this->getCaTransporte();
        $options["usuario"] = $user->getUserId();
        $options["idsucursal"] = $user->getIdSucursal();        
        
        $diff =  $this->getDifference($options);        
        
        $options["estado"] = $diff["estado"];
        $options["val"] = $diff["val"];
        
        $registro = Doctrine::getTable("InoIndicadores")->findByDql("ca_idindicador = ? AND ca_idcaso = ? AND ca_idetapa = ?", array($options["idg"], $options["idcaso"], $options["idetapa"]));
                        
        if(count($registro)>0){
            $existe = true;
        }
        
        $resultado = null;
        
        if(!$existe && (($diff["estado"] == 0 && strlen($options["observaciones"])>1) || $diff["estado"]==1)){
            $registro = InoIndicadoresTable::registrarIndicador($options);
            $resultado = $registro["success"]?$registro["id"]:$registro["error"];
        }
        
        switch($diff["estado"]){
            case 0:
                if(strlen($options["observaciones"])==1){
                    $row = array("cumplio" => "No", "idcaso"=>$options["idcaso"], "idhouse"=>$options["idhouse"], "doctransporte"=>$options["doctransporte"]);                                                
                }else{//                    
                    $row = array("cumplio" => "Justifico", "idcaso"=>$options["idcaso"], "resultado"=>$resultado);
                }
                break;
            case 1;
                $row = array("cumplio" => "Si", "idcaso"=>$options["idcaso"], "resultado"=>$resultado);
                break;
        }
        return $row;        
    }    
}
