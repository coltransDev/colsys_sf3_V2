<?php

/**
 * Email
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5845 2009-06-09 07:36:57Z jwage $
 */
class Email extends BaseEmail {
    /*
     * Agrega un attahcment
     * author: Andres Botero
     */

    public function addAttachment($file) {
        $attachmentsStr = $this->getCaAttachment();
        if ($attachmentsStr) {
            $attachmentsStr.="|";
        }
        $attachmentsStr.= $file;
        $this->setCaAttachment($attachmentsStr);
    }

    /*
     * Agrega un destinatario
     * author: Andres Botero
     */

    public function addTo($address) {
        $toStr = $this->getCaAddress();
        if ($toStr) {
            $toStr.=",";
        }
        $toStr.= $address;
        $this->setCaAddress($toStr);
    }

    /*
     * Agrega un cc
     * author: Andres Botero
     */

    public function addCC($address) {
        $ccStr = $this->getCaCc();
        if ($ccStr) {
            $ccStr.=",";
        }
        $ccStr.= $address;
        $this->setCaCc($ccStr);
    }

    /*
     * Envia un correo electronico a partir de la informacion de la BD
     * author: Andres Botero, Mauricio Quinche
     */

    public function send() {
        require_once(sfConfig::get('sf_lib_dir') . '/vendor/Swift/lib/swift_init.php'); # needed due to symfony autoloader

        $result = false;
        $logFile = sfConfig::get('sf_root_dir') . DIRECTORY_SEPARATOR . "log" . DIRECTORY_SEPARATOR . "mail_error.log";
        $logHeader = date("Y-m-d H:i:s") . " email_id: " . $this->getCaIdemail() . " >> ";
        $logHeader.= "Subject: " . $this->getCaSubject() . " >> ";
        $logHeader.= "To: " . $this->getCaAddress() . " >> ";
        $logHeader.= "CC: " . $this->getCaCc() . " >> ";
        if (!$this->getCaAddress() && !$this->getCaCc()) {
            $user = Doctrine::getTable("Usuario")->find($this->getCaUsuenvio());
            if ($user) {
                $this->setCaAddress(trim($user->getCaEmail()));
                Utils::writeLog($logFile, "email sin destinatarios, se envia al creador");
            } else {
                Utils::writeLog($logFile, "email sin destinatarios, no se envia a nadie");
            }
        }
        
        $authuser=false;
        $host=sfConfig::get("app_smtp_host");        
        if (
                stripos(strtolower($this->getCaFrom()), '@coltrans.com.co') !== false || 
                stripos(strtolower($this->getCaFrom()), '@colmas.com.co') !== false || 
                stripos(strtolower($this->getCaFrom()), '@colotm.com') !== false   //||
                //stripos(strtolower($this->getCaFrom()), '@tplogistics.com.pe') !== false ||
                //stripos(strtolower($this->getCaFrom()), '@coldepositos.com.co') !== false
                ) 
        {
            $host=sfConfig::get("app_smtp_host2");
        }else if (stripos(strtolower($this->getCaFrom()), '@consolcargo.com') !== false)                 
        {            
            $host=sfConfig::get("app_smtp_host3");
            $host=sfConfig::get("app_smtp_host");
            
            //$authuser=true;
        }else
        {
            $host=sfConfig::get("app_smtp_host");
        }
        //$host=sfConfig::get("app_smtp_host");
        //echo $host."<br>";

        if(!$authuser)
        {
            
            $transport = Swift_SmtpTransport::newInstance($host, sfConfig::get("app_smtp_port"),sfConfig::get("app_smtp_security"));
            if (sfConfig::get("app_smtp_user")) {
                $transport->setUsername(sfConfig::get("app_smtp_user"))
                        ->setPassword(sfConfig::get("app_smtp_passwd"));
            }
        }
        else
        {
            $host="smtp.office365.com";
            $host=sfConfig::get("app_smtp_host3");
            $enviar=false;
            switch($this->getCaFrom())
            {
                case "customerotm@consolcargo.com":
                    $app_smtp_user="customerotm@consolcargo.com";
                    $app_smtp_passwd="Huwu8155";
                    $enviar=true;
                    break;
                case "operativo-otm@consolcargo.com":
                    $app_smtp_user="operativo-otm@consolcargo.com";
                    $app_smtp_passwd="Pamu6745";
                    $enviar=true;
                    break;
            }
            if($enviar==true)
            {
                $transport = Swift_SmtpTransport::newInstance($host, sfConfig::get("app_smtp_port"),sfConfig::get("app_smtp_security"));                
                $transport->setUsername($app_smtp_user)
                          ->setPassword($app_smtp_passwd);
                
            }
            
        }
        Swift_Preferences::getInstance()->setCharset('iso-8859-1');

        $mailer = Swift_Mailer::newInstance($transport);

        $logger = new Swift_Plugins_Loggers_ArrayLogger();
        $mailer->registerPlugin(new Swift_Plugins_LoggerPlugin($logger));
        $message = Swift_Message::newInstance($this->getCaSubject());

        try {
            $message->setFrom(array(trim($this->getCaFrom()) => $this->getCaFromname()));
            $message->setSender(trim($this->getCaFrom()));
            $message->setReturnPath(trim($this->getCaFrom()));

        } catch (Exception $e) {
            $event = $logHeader;
            $event.= $e->getMessage();
            Utils::writeLog($logFile, $event);
        }
        $badAddresses = array();
        if (sfConfig::get("app_smtp_debugAddress")) {
            try {
                $message->addTo(sfConfig::get("app_smtp_debugAddress"));
            } catch (Exception $e) {
                $event = $logHeader;
                $event.= $e->getMessage();

                Utils::writeLog($logFile, $event);
            }
        } else {

            if ($this->getCaAddress()) {
                $recips = array_unique(explode(",", $this->getCaAddress()));
                foreach ($recips as $key => $recip) {
                    $recip = str_replace(" ", "", $recip);
                    $recip = str_replace("\t", "", $recip);
                    if ($recip) {
                        try {
                            $message->addTo($recip);
                        } catch (Exception $e) {
                            $event = $logHeader;
                            $event.= $e->getMessage();

                            Utils::writeLog($logFile, $event);

                            $badAddresses[] = $recip;
                        }
                    }
                }
            }

            if ($this->getCaCc()) {
                $recips = array_unique(explode(",", $this->getCaCc()));

                $address = explode(",", $this->getCaAddress());

                foreach ($recips as $key => $recip) {
                    $recip = str_replace(" ", "", $recip);
                    $recip = str_replace("\t", "", $recip);
                    if ($recip) {
                        if (!in_array($recip, $address)) {
                            try {
                                $message->addCc(trim($recip));
                            } catch (Exception $e) {
                                $event = $logHeader;
                                $event.= $e->getMessage();

                                Utils::writeLog($logFile, $event);

                                $badAddresses[] = $recip;
                            }
                        }
                    }
                }
            }
        }
        $message->setMaxLineLength(1000);
        if ($this->getCaBodyhtml()) {
            $message->setBody(($this->getCaBodyhtml()), 'text/html', 'iso-8859-1');
        }

        if ($this->getCaBody()) {
            $message->addPart(($this->getCaBody()), 'text/plain', 'iso-8859-1');
        } else {
            if (!$this->getCaBodyhtml()) {
                $message->addPart("<< Este mensaje está en formato HTML pero su equipo no está configurado para mostrarlo automáticamente. Active la opción HTML del menú Ver en su cliente de correo electrónico para una correcta visualización>>", 'text/plain', 'iso-8859-1');
            }
        }
        //acuse de recibo
        if ($this->getCaReadreceipt()) {
            try {
                $message->setReadReceiptTo($this->getCaFrom());
            } catch (Exception $e) {
                //echo 'Caught exception: ',  $e->getMessage(), "\n";
                $event = $logHeader;
                $event.= $e->getMessage();
                Utils::writeLog($logFile, $event);
            }
        }
        try {
            if ($this->getCaAttachment()) {
                $atchFiles = explode("|", $this->getCaAttachment());
                //Attachments
                foreach ($atchFiles as $file) {
                    $file = sfConfig::get('app_digitalFile_root') . DIRECTORY_SEPARATOR . $file;
                    if (file_exists($file)) {
                        $message->attach(Swift_Attachment::fromPath($file)->setFilename(Utils::replace(basename($file))));
                    } else {

                        if (file_exists($file . ".gz")) {
                            $data = gzfile($file . ".gz");
                            $data = implode($data);
                            $message->attach(Swift_Attachment::newInstance($data, Utils::replace(basename($file)), Utils::mimetype(basename($file))));
                        } else {

                            $event = "Id Email: " . $this->getCaIdemail() . "<br />" . $this->getCaSubject() . "<br />No existe el archivo: " . $file;
                            throw new Exception($event);
                        }
                    }
                }
            }
        } catch (Exception $e) {
            $event = $logHeader;
            $event.= $logger->dump();
            $event.= $e->getMessage();
            Utils::writeLog($logFile, $event);
            $data = array();
            
            $data["subject"] = $e->getMessage();
            $data["mensaje"] = $e->getTraceAsString();
            Utils::sendEmail($data);
            return false;
        }

        /*$attachments = $this->getEmailAttachment();
        foreach ($attachments as $attachment) {
            try {
                $fp = $attachment->getCaContent();
                $attachment = Swift_Attachment::newInstance()
                                ->setFilename(Utils::replace($attachment->getCaHeaderFile()))
                                ->setContentType(Utils::mimetype($attachment->getCaHeaderFile()))
                                ->setBody(stream_get_contents($fp));
                $message->attach($attachment);
                fclose($fp);
            } catch (Exception $e) {
                $event = $logHeader;
                $event.= $logger->dump();

                Utils::writeLog($logFile, $event);
                return false;
            }
        }*/

        $failures = null;
        try {
            if ($this->getCaPriority() > 0) {
                $message->setPriority($this->getCaPriority());
                $message->setImportance();
            }
            $mailer->send($message, $failures);

            if ($failures) {
                $event = $logHeader;
                $event.="Failures: >> [";
                foreach ($failures as $failure) {
                    $event.= $failure . ",";
                }
                $event.="]";
                Utils::writeLog($logFile, $event);
            }

            $this->setCaFchenvio(date("Y-m-d H:i:s"));
            $this->save();

            /* $event= $logHeader;
              $event.= "Enviado OK\n";
              Utils::writeLog($logFile , $event ); */

            $result = true;
        } catch (Exception $e) {
            echo 'Caught exception: ', $e->getMessage(), "\n";
            $event = $logHeader;
            $event.= $logger->dump();
            Utils::writeLog($logFile, $event);
        }

        if ($failures || $badAddresses) {
            $txt = "Ha ocurrido un error al enviar el mensaje a los siguientes destinatarios: ";
            if ($failures) {
                $txt.= " " . implode(",", $failures);
            }
            if ($badAddresses) {
                $txt.= " " . implode(",", $badAddresses);
            }

            $txt.= " \n>>>>>>> Mensaje Original" . $this->getCaBody();
            $message = Swift_Message::newInstance("Error al enviar mensaje");
            $message->setFrom(array("no-reply@coltrans.com.co" => "no-reply@coltrans.com.co"));
            $message->addTo($this->getCaFrom());
            $message->addPart($txt, 'text/plain', 'iso-8859-1');
            $mailer->send($message);
        }
        return $result;
    }

    public function getDirectorioBase() {
        return EmailTable::FOLDER . DIRECTORY_SEPARATOR .date("Y").DIRECTORY_SEPARATOR .$this->getCaIdemail() . DIRECTORY_SEPARATOR;
    }

    public function getDirectorio() {
        return sfConfig::get("app_digitalFile_root") . DIRECTORY_SEPARATOR . $this->getDirectorioBase();
    }
    
    public function getDirectorioCorp($idempresa) {
    
        $usuarios = Doctrine::getTable("Usuario")
                ->createQuery("u")
                ->select("u.ca_email")
                ->leftJoin("u.Sucursal s")
                ->addWhere("s.ca_idempresa = ?", $idempresa)
                ->andWhere("u.ca_activo = TRUE")
                ->orderby("u.ca_email")
                ->execute();
        $correos = array();
        foreach($usuarios as $usuario){
            if($usuario->getCaEmail() && $usuario->getCaEmail()!= null){
                if(!in_array($usuario->getCaEmail(), $correos))
                    $correos[] = $usuario->getCaEmail();
            }
        }
        return $correos;
    }
    
    
    
    public function send1() {
        require_once(sfConfig::get('sf_lib_dir') . '/vendor/Swift/lib/swift_init.php'); # needed due to symfony autoloader

        $result = false;
        $logFile = sfConfig::get('sf_root_dir') . DIRECTORY_SEPARATOR . "log" . DIRECTORY_SEPARATOR . "mail_error.log";
        $logHeader = date("Y-m-d H:i:s") . " email_id: " . $this->getCaIdemail() . " >> ";
        $logHeader.= "Subject: " . $this->getCaSubject() . " >> ";
        $logHeader.= "To: " . $this->getCaAddress() . " >> ";
        $logHeader.= "CC: " . $this->getCaCc() . " >> ";
        if (!$this->getCaAddress() && !$this->getCaCc()) {
            $user = Doctrine::getTable("Usuario")->find($this->getCaUsuenvio());
            if ($user) {
                $this->setCaAddress($user->getCaEmail());
                Utils::writeLog($logFile, "email sin destinatarios, se envia al creador");
            } else {
                Utils::writeLog($logFile, "email sin destinatarios, no se envia a nadie");
            }
        }

        //$transport = Swift_SmtpTransport::newInstance(sfConfig::get("app_smtp_host"), sfConfig::get("app_smtp_port"),sfConfig::get("app_smtp_security"));
        #    host: smtp.gmail.com
#    port: 465
#    security: ssl
#    user: maquinche@coltrans.co
#    passwd:  80166236
        $transport = Swift_SmtpTransport::newInstance("smtp.gmail.com", "465","ssl")        
            ->setUsername("maquinche@coltrans.co")
                    ->setPassword("80166236");
        
        Swift_Preferences::getInstance()->setCharset('iso-8859-1');

        $mailer = Swift_Mailer::newInstance($transport);

        $logger = new Swift_Plugins_Loggers_ArrayLogger();
        $mailer->registerPlugin(new Swift_Plugins_LoggerPlugin($logger));
        $message = Swift_Message::newInstance($this->getCaSubject());

        echo $this->getCaFrom(). "-" .$this->getCaFromname();
        try {
            $message->setFrom(array($this->getCaFrom() => $this->getCaFromname()));
            $message->setSender($this->getCaFrom(),$this->getCaFromname());
            $message->setReturnPath($this->getCaFrom());
            $message->setReplyTo($this->getCaFrom());
            //and return path header: $headers->addTextHeader('Return-Path', 'new.email@example.com');

        } catch (Exception $e) {
            $event = $logHeader;
            $event.= $e->getMessage();
            Utils::writeLog($logFile, $event);
        }
        $badAddresses = array();
        if (sfConfig::get("app_smtp_debugAddress")) {
            try {
                $message->addTo(sfConfig::get("app_smtp_debugAddress"));
            } catch (Exception $e) {
                $event = $logHeader;
                $event.= $e->getMessage();

                Utils::writeLog($logFile, $event);
            }
        } else {

            if ($this->getCaAddress()) {
                $recips = array_unique(explode(",", $this->getCaAddress()));
                foreach ($recips as $key => $recip) {
                    $recip = str_replace(" ", "", $recip);
                    $recip = str_replace("\t", "", $recip);
                    if ($recip) {
                        try {
                            $message->addTo($recip);
                        } catch (Exception $e) {
                            $event = $logHeader;
                            $event.= $e->getMessage();

                            Utils::writeLog($logFile, $event);

                            $badAddresses[] = $recip;
                        }
                    }
                }
            }

            if ($this->getCaCc()) {
                $recips = array_unique(explode(",", $this->getCaCc()));

                $address = explode(",", $this->getCaAddress());

                foreach ($recips as $key => $recip) {
                    $recip = str_replace(" ", "", $recip);
                    $recip = str_replace("\t", "", $recip);
                    if ($recip) {
                        if (!in_array($recip, $address)) {
                            try {
                                $message->addCc($recip);
                            } catch (Exception $e) {
                                $event = $logHeader;
                                $event.= $e->getMessage();

                                Utils::writeLog($logFile, $event);

                                $badAddresses[] = $recip;
                            }
                        }
                    }
                }
            }
        }
        $message->setMaxLineLength(1000);
        if ($this->getCaBodyhtml()) {
            $message->setBody(($this->getCaBodyhtml()), 'text/html', 'iso-8859-1');
        }

        if ($this->getCaBody()) {
            $message->addPart(($this->getCaBody()), 'text/plain', 'iso-8859-1');
        } else {
            if (!$this->getCaBodyhtml()) {
                $message->addPart("<< Este mensaje está en formato HTML pero su equipo no está configurado para mostrarlo automáticamente. Active la opción HTML del menú Ver en su cliente de correo electrónico para una correcta visualización>>", 'text/plain', 'iso-8859-1');
            }
        }
        //acuse de recibo
        if ($this->getCaReadreceipt()) {
            try {
                $message->setReadReceiptTo($this->getCaFrom());
            } catch (Exception $e) {
                //echo 'Caught exception: ',  $e->getMessage(), "\n";
                $event = $logHeader;
                $event.= $e->getMessage();
                Utils::writeLog($logFile, $event);
            }
        }
        try {
            if ($this->getCaAttachment()) {
                $atchFiles = explode("|", $this->getCaAttachment());
                //Attachments
                foreach ($atchFiles as $file) {
                    $file = sfConfig::get('app_digitalFile_root') . DIRECTORY_SEPARATOR . $file;
                    if (file_exists($file)) {
                        $message->attach(Swift_Attachment::fromPath($file)->setFilename(Utils::replace(basename($file))));
                    } else {

                        if (file_exists($file . ".gz")) {
                            $data = gzfile($file . ".gz");
                            $data = implode($data);
                            $message->attach(Swift_Attachment::newInstance($data, Utils::replace(basename($file)), Utils::mimetype(basename($file))));
                        } else {

                            $event = "Id Email: " . $this->getCaIdemail() . "<br />" . $this->getCaSubject() . "<br />No existe el archivo: " . $file;
                            throw new Exception($event);
                        }
                    }
                }
            }
        } catch (Exception $e) {
            $event = $logHeader;
            $event.= $logger->dump();
            $event.= $e->getMessage();
            Utils::writeLog($logFile, $event);
            $data = array();
            $data["mensaje"] = $event;
            Utils::sendEmail($data);
            return false;
        }

        $attachments = $this->getEmailAttachment();
        foreach ($attachments as $attachment) {
            try {
                $fp = $attachment->getCaContent();
                $attachment = Swift_Attachment::newInstance()
                                ->setFilename(Utils::replace($attachment->getCaHeaderFile()))
                                ->setContentType(Utils::mimetype($attachment->getCaHeaderFile()))
                                ->setBody(stream_get_contents($fp));
                $message->attach($attachment);
                fclose($fp);
            } catch (Exception $e) {
                $event = $logHeader;
                $event.= $logger->dump();

                Utils::writeLog($logFile, $event);
                return false;
            }
        }

        $failures = null;
        try {
            if ($this->getCaPriority() > 0) {
                $message->setPriority($this->getCaPriority());
                $message->setImportance();
            }
            $headers = $message->getHeaders();
            print_r($headers->toString());
            $mailer->send($message, $failures);

            if ($failures) {
                $event = $logHeader;
                $event.="Failures: >> [";
                foreach ($failures as $failure) {
                    $event.= $failure . ",";
                }
                $event.="]";
                Utils::writeLog($logFile, $event);
            }

            $this->setCaFchenvio(date("Y-m-d H:i:s"));
            $this->save();

            /* $event= $logHeader;
              $event.= "Enviado OK\n";
              Utils::writeLog($logFile , $event ); */

            $result = true;
        } catch (Exception $e) {
            echo 'Caught exception: ', $e->getMessage(), "\n";
            $event = $logHeader;
            $event.= $logger->dump();
            Utils::writeLog($logFile, $event);
        }

        if ($failures || $badAddresses) {
            $txt = "Ha ocurrido un error al enviar el mensaje a los siguientes destinatarios: ";
            if ($failures) {
                $txt.= " " . implode(",", $failures);
            }
            if ($badAddresses) {
                $txt.= " " . implode(",", $badAddresses);
            }

            $txt.= " \n>>>>>>> Mensaje Original" . $this->getCaBody();
            $message = Swift_Message::newInstance("Error al enviar mensaje");
            $message->setFrom(array("no-reply@coltrans.com.co" => "no-reply@coltrans.com.co"));
            $message->addTo($this->getCaFrom());
            $message->addPart($txt, 'text/plain', 'iso-8859-1');
            $mailer->send($message);
        }
        return $result;
    }


}
