<?php

/**
 * HdeskResponse
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5845 2009-06-09 07:36:57Z jwage $
 */
class HdeskResponse extends BaseHdeskResponse
{
    public function updateLuceneIndex() {

        $index = $this->getTable()->getLuceneIndex();

        // remove an existing entry

        $hits = $index->find('pk:' . $this->getCaIdresponse());
        foreach ($hits as $hit) {

            $index->delete($hit->id);
        }


        $doc = new Zend_Search_Lucene_Document();

        // store job primary key URL to identify it in the search results
        $doc->addField(Zend_Search_Lucene_Field::UnIndexed('pk', $this->getCaIdresponse()));
        $doc->addField(Zend_Search_Lucene_Field::UnStored('ca_idticket', $this->getCaIdticket()));
        $doc->addField(Zend_Search_Lucene_Field::UnStored('ca_login', $this->getCaLogin()));
        $doc->addField(Zend_Search_Lucene_Field::UnStored('ca_loginName', $this->getUsuario()->getCaNombre()));
        $doc->addField(Zend_Search_Lucene_Field::UnStored('ca_text', utf8_encode($this->getCaText()), 'utf-8'));

        // add job to the index
        $index->addDocument($doc);
        $index->commit();
    }

    public function save(Doctrine_Connection $conn = null) {
        // ...

        $conn = $conn ? $conn : $this->getTable()->getConnection();
        $conn->beginTransaction();
        try {
            $ret = parent::save($conn);

            $this->updateLuceneIndex();

            $conn->commit();

            return $ret;
        } catch (Exception $e) {
            $conn->rollBack();
            throw $e;
        }
    }

    // lib/model/doctrine/JobeetJob.class.php
    public function delete(Doctrine_Connection $conn = null) {
        $index = HdeskResponseTable::getLuceneIndex();

        if ($hit = $index->find('pk:' . $this->getCaIdresponse())) {
            $index->delete($hit->id);
        }

        return parent::delete($conn);
    }

}