<?php

/**
 * InoAuditor
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class InoAuditor extends BaseInoAuditor {

    
     /**
     * Retorna el id del evento (nodo padre) dado el id de un nodo cualquiera del arbol.
     * @param type $idnodo id del evento 
     * @return type
     */
    public function getEmpresaById($idempresa) {
        $con = Doctrine_Manager::getInstance()->connection();
        $sql = "       
            select i.ca_nombre
            from ids.tb_ids i
            where (i.ca_id = " . $idempresa . ")   
            ";
        $st = $con->execute($sql);
        $data = $st->fetchAll();
        $id = $data[0]["ca_nombre"];
        return $id;
    }
    
    /**
     * Retorna el id del evento (nodo padre) dado el id de un nodo cualquiera del arbol.
     * @param type $idnodo id del evento 
     * @return type
     */
    public function getIdAncestro($idnodo) {
        $con = Doctrine_Manager::getInstance()->connection();
        $sql = "       
            select t1.*, split_part(t1.ca_camino, '/', 3) as ca_padre
            from ino.tb_auditor t1
            where t1.ca_idevento = " . $idnodo . " and t1.ca_idevento != 0
            limit 1    
            ";
        $st = $con->execute($sql);
        $data = $st->fetchAll();
        $id = $data[0]["ca_padre"];
        return $id;
    }

    /**
     * Dado el id del nodo padre, retorna el id del nodo del primer seguimiento
     * @param type $idnodo
     * @return int 0 sino encuentra el nodo, de lo contrario retorna el id del nodo
     */
    public function getIdSeguimientoPadre($idnodo) {
        $idevento = $this->getIdAncestro(intval($idnodo));
        $con = Doctrine_Manager::getInstance()->connection();
        //$inoAuditor = Doctrine::getTable("InoAuditor")->find($idnodo);
        $sql = "
          select t1.ca_idevento, t1.ca_tipo, t1.ca_idantecedente, split_part(t1.ca_camino, '/', 3) as ca_padre, t1.ca_camino
          from ino.tb_auditor t1
          where t1.ca_idevento != 0 and split_part(t1.ca_camino, '/', 3)  = '" . $idevento . "' and ca_tipo = 'S'
          order by t1.ca_camino
          limit 1
          ";
        $st = $con->execute($sql);
        $data = $st->fetchAll();
        if ($data) {
            $id = $data[0]["ca_idevento"];
            return $id;
        }
        else
            return 0;
    }

    /**
     * Dado el id del nodo padre, retorna el id del nodo antecendente del primer seguimiento
     * @param type $idevento
     * @return type
     */
    public function getIdAntecedenteSeguimientoPadre($idevento) {
        $con = Doctrine_Manager::getInstance()->connection();
        //$inoAuditor = Doctrine::getTable("InoAuditor")->find($idnodo);
        $sql = "
          select t1.ca_idevento, t1.ca_tipo, t1.ca_idantecedente, split_part(t1.ca_camino, '/', 3) as ca_padre, t1.ca_camino
          from ino.tb_auditor t1
          where t1.ca_idevento != 0 and split_part(t1.ca_camino, '/', 3)  = '" . $idevento . "' and ca_tipo = 'S'
          order by t1.ca_camino
          limit 1
          ";
        $st = $con->execute($sql);
        $data = $st->fetchAll();
        if ($data) {
            $id = $data[0]["ca_idantecedente"];
            return $id;
        }
        else
            return 0;
    }

    
     /**
     * Dado el id del nodo, retorna el id de antecendente de primer nivel que es ancestro del nodo
     * @param type $idmaster
     * @return type 0 sino encuentra el nodo, de lo contrario retorna el id del nodo
     */
    public function getIdAntecedenteSeguimiento($idnodo) {
        $idevento = $this->getIdAncestro(intval($idnodo));
        $con = Doctrine_Manager::getInstance()->connection();
        //$inoAuditor = Doctrine::getTable("InoAuditor")->find($idnodo);
        $sql = "
          select t1.ca_idevento, t1.ca_tipo, t1.ca_idantecedente, split_part(t1.ca_camino, '/', 4) as ca_padre, t1.ca_camino
          from ino.tb_auditor t1
          where t1.ca_idevento != 0 and split_part(t1.ca_camino, '/', 3)  = '" . $idevento . "' and ca_tipo = 'S' and ca_idevento = '" . $idnodo . "'
          order by t1.ca_camino
          limit 1
          ";
       
        $st = $con->execute($sql);
        $data = $st->fetchAll();
        if ($data) {
            $id = $data[0]["ca_idantecedente"];
            return $id;
        }
        else
            return 0;
    }
    
    /**
     * Dado el id de un evento inicial cambia el estado de todos los seguimientos que sean directamente hijos a finalizado
     * @param type $idmaster
     * @return type
     */
    public function cerrarSeguimientosEvento($idevento) {
        $idantecedente = $this->getIdAntecedenteSeguimientoPadre($idevento);
        $con = Doctrine_Manager::getInstance()->connection();
        $sql = "
          update ino.tb_auditor t
          set ca_estado='Finalizado'
          where t.ca_idevento != 0 and split_part(t.ca_camino, '/', 3)  = '" . $idevento . "' and t.ca_tipo = 'S' and t.ca_idantecedente = '" . $idantecedente . "'            
          ";
        $con->execute($sql);
    }

    /**
     * Dado el id de un seguimiento y un nombre de usuario se cambia el estado del seguimiento a 'Finalizado'
     * @param type $idseguimiento
     * @param type $user
     */
    public function cerrarSeguimientoEvento($idseguimiento, $user) {
        $this->cerrarTareaSeguimiento($idseguimiento, $user);
        $idantecedente = $this->getIdAntecedenteSeguimientoPadre($this->getIdAncestro($idseguimiento));
        $con = Doctrine_Manager::getInstance()->connection();
        $sql = "
          update ino.tb_auditor t
          set ca_estado='Finalizado'
          where t.ca_idevento != 0 and t.ca_idevento  = '" . $idseguimiento . "' and t.ca_tipo = 'S' and t.ca_idantecedente  = '" . $idantecedente . "'             
          ";
        $con->execute($sql);
    }

    /**
     * Permite crear una tarea generada al crear un seguimiento de primer nivel dado el id del seguimiento.
     * @param type $idseguimiento 
     * @param type $user
     */
    public function cerrarTareaSeguimiento($idseguimiento, $user) {
        //$inoAuditor = Doctrine::getTable("InoAuditor")->find($idseguimiento);
        $con = Doctrine_Manager::getInstance()->connection();
        $idtarea = '';
        $sql = "
             SELECT ia.ca_idtarea
             FROM ino.tb_auditor ia
             WHERE ia.ca_idevento = '" . $idseguimiento . "'            
              ";
        $st = $con->execute($sql);
        $data = $st->fetchAll();
        if ($data) {
            $idtarea = $data[0]["ca_idtarea"];
        }


        if ($idtarea) {
            $con2 = Doctrine_Manager::getInstance()->connection();
            $sql2 = "
             update notificaciones.tb_tareas t 
             set ca_usuterminada='" . $user . "', ca_fchterminada='" . date("Y-m-d H:i:s") . "'
             where t.ca_idtarea = '" . $idtarea . "'            
              ";
            $con2->execute($sql2);
        }
    }

    /**
     * Dado el id de un evento inicial cambia el estado del evento inicial y el de todos los seguimientos que sean directamente hijos a 'finalizado'
     * @param type $idevento
     * @param type $user
     */
    public function cerrarEventoAuditoria($idevento, $user) {
        $this->cerrarSeguimientosEvento($idevento);
        $this->cerrarTareasEventoAuditoria($idevento, $user);
        $con = Doctrine_Manager::getInstance()->connection();
        $sql = "
          update ino.tb_auditor t
          set ca_estado='Finalizado'
          where t.ca_idevento = '" . $idevento . "' and t.ca_tipo = 'I'            
          ";
        $con->execute($sql);
    }

    /**
     * Dado el id de un evento inicial y un nombre de usuario, cierra todas las tareas del evento
     * @param type $idevento id de un evento inicial
     * @param type $user nombre de usuario
     */
    public function cerrarTareasEventoAuditoria($idevento, $user) {
        $this->cerrarSeguimientosEvento($idevento);

        //$inoAuditor = Doctrine::getTable("InoAuditor")->find($idevento);

        //$inoAuditor = Doctrine::getTable("InoAuditor")->find($idseguimiento);
        $con = Doctrine_Manager::getInstance()->connection();
        $idtarea = '';
        $sql = "
             SELECT ia.ca_idtarea
             FROM ino.tb_auditor ia
             WHERE ia.ca_idevento = '" . $idevento . "'            
              ";
        $st = $con->execute($sql);
        $data = $st->fetchAll();
        if ($data) {
            $idtarea = $data[0]["ca_idtarea"];
        }

        if ($idtarea) {
      
        $con2 = Doctrine_Manager::getInstance()->connection();
        $sql2 = "
             update notificaciones.tb_tareas t 
             set ca_usuterminada='" . $user . "', ca_fchterminada='" . date("Y-m-d H:i:s") . "'
             where t.ca_idtarea = '" . $idtarea . "'            
              ";
        $con2->execute($sql2);
        }
    }

}
